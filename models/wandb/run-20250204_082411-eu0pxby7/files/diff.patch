diff --git a/README.md b/README.md
index cbafe3c..d1dd7c8 100644
--- a/README.md
+++ b/README.md
@@ -25,7 +25,7 @@ https://nvie.com/posts/a-successful-git-branching-model/
 5. If necessary, update git config with username and email using ```git config --global user.name "Your Name"``` and ```git config --global user.email "youremail@example.com"```.
 
 ## Steps to run on Turing:
-1. ssh into turing account and run commands ```sinteractive``` and ```tmux```. 
+1. ssh into turing account and run commands ```sinteractive``` and ```tmux```.  (```tmux kill-server``` to kill all existing tmux sessions)
 2. Activate virtual env using one of the commands above.
 3. To run jupyter notebooks and save output to notebook file: jupyter nbconvert --to notebook --execute --inplace notebook_name.ipynb
 
diff --git a/models/__pycache__/functions.cpython-310.pyc b/models/__pycache__/functions.cpython-310.pyc
index b9d8dbd..52fa734 100644
Binary files a/models/__pycache__/functions.cpython-310.pyc and b/models/__pycache__/functions.cpython-310.pyc differ
diff --git a/models/carl_encoder.ipynb b/models/carl_encoder.ipynb
index bc3555c..64a13d8 100644
--- a/models/carl_encoder.ipynb
+++ b/models/carl_encoder.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -69,30 +69,7 @@
     "\n",
     "file_path = '../data/carls/test_carls.feather'\n",
     "test_carls = pd.read_feather(file_path)\n",
-    "test_carls = test_carls.drop(columns=['level_0'])\n",
-    "\n",
-    "# file_path='/mnt/usb/cmdunham/preprocessed_ims_data/train_carls_avg_backgrounds.csv'\n",
-    "# train_carls = pd.read_csv(file_path)\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_carls_avg_backgrounds.csv'\n",
-    "# val_carls = pd.read_csv(file_path)\n",
-    "# file_path='/mnt/usb/cmdunham/preprocessed_ims_data/test_carls_avg_backgrounds.csv'\n",
-    "# test_carls = pd.read_csv(file_path)\n",
-    "\n",
-    "\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/train_carls_dif_backgrounds.csv'\n",
-    "# train_carls = pd.read_csv(file_path)\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_carls_dif_backgrounds.csv'\n",
-    "# val_carls = pd.read_csv(file_path)\n",
-    "# file_path='/mnt/usb/cmdunham/preprocessed_ims_data/test_carls_dif_backgrounds.csv'\n",
-    "# test_carls = pd.read_csv(file_path)\n",
-    "\n",
-    "\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/train_carls_.csv'\n",
-    "# train_carls = pd.read_csv(file_path)\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_carls_.csv'\n",
-    "# val_carls = pd.read_csv(file_path)\n",
-    "# file_path='/mnt/usb/cmdunham/preprocessed_ims_data/test_carls_.csv'\n",
-    "# test_carls = pd.read_csv(file_path)"
+    "test_carls = test_carls.drop(columns=['level_0'])"
    ]
   },
   {
@@ -672,17 +649,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Things that need to be changed for each encoder/dataset/target embedding\n",
-    "# notebook_name = '/home/cmdunham/ChemicalDataGeneration/models/carl_encoder.ipynb'\n",
-    "notebook_name = 'C:/Users/cmdunham/OneDrive/Documents/phd_program/ChemicalDataGeneration/models/carl_encoder.ipynb'\n",
+    "notebook_name = '/home/cmdunham/ChemicalDataGeneration/models/carl_encoder.ipynb'\n",
+    "# notebook_name = 'C:/Users/cmdunham/OneDrive/Documents/phd_program/ChemicalDataGeneration/models/carl_encoder.ipynb'\n",
     "architecture = 'carl_encoder'\n",
     "dataset_type = 'carls'\n",
     "target_embedding = 'ChemNet'\n",
-    "encoder_path = 'carl_to_chemnet_encoder.pth'\n",
+    "encoder_path = 'trained_models/carl_to_chemnet_encoder.pth'\n",
     "\n",
     "config = {\n",
     "    'wandb_entity': 'catemerfeld',\n",
@@ -691,7 +668,9 @@
     "    'threads':1,\n",
     "}\n",
     "\n",
-    "os.environ['WANDB_NOTEBOOK_NAME'] = notebook_name"
+    "os.environ['WANDB_NOTEBOOK_NAME'] = notebook_name\n",
+    "\n",
+    "wandb.login(key='9729ad7b1f3a60f1072cdf7af979b737955733d4')"
    ]
   },
   {
@@ -965,9 +944,9 @@
     "# sorted_chem_names = list(train_carls.columns[-8:])\n",
     "\n",
     "model_hyperparams = {\n",
-    "  'batch_size':[200],\n",
-    "  'epochs': [3],\n",
-    "  'learning_rate':[.00001],\n",
+    "  'batch_size':[32],\n",
+    "  'epochs': [500],\n",
+    "  'learning_rate':[.0001,.00001],\n",
     "  }\n",
     "\n",
     "train_data = TensorDataset(train_carl_tensor, train_chem_encodings_tensor, train_embeddings_tensor, train_carl_indices_tensor)\n",
@@ -1072,41 +1051,6 @@
     "encoder_criterion = nn.MSELoss()"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": 43,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "encoder.0.weight \t torch.Size([1548, 1676])\n",
-      "encoder.0.bias \t torch.Size([1548])\n",
-      "encoder.2.weight \t torch.Size([1420, 1548])\n",
-      "encoder.2.bias \t torch.Size([1420])\n",
-      "encoder.4.weight \t torch.Size([1292, 1420])\n",
-      "encoder.4.bias \t torch.Size([1292])\n",
-      "encoder.6.weight \t torch.Size([1164, 1292])\n",
-      "encoder.6.bias \t torch.Size([1164])\n",
-      "encoder.8.weight \t torch.Size([1036, 1164])\n",
-      "encoder.8.bias \t torch.Size([1036])\n",
-      "encoder.10.weight \t torch.Size([908, 1036])\n",
-      "encoder.10.bias \t torch.Size([908])\n",
-      "encoder.12.weight \t torch.Size([780, 908])\n",
-      "encoder.12.bias \t torch.Size([780])\n",
-      "encoder.14.weight \t torch.Size([652, 780])\n",
-      "encoder.14.bias \t torch.Size([652])\n",
-      "encoder.16.weight \t torch.Size([512, 652])\n",
-      "encoder.16.bias \t torch.Size([512])\n"
-     ]
-    }
-   ],
-   "source": [
-    "for param_tensor in best_model.state_dict():\n",
-    "    print(param_tensor, \"\\t\", best_model.state_dict()[param_tensor].size())"
-   ]
-  },
   {
    "cell_type": "code",
    "execution_count": 35,
@@ -1195,13 +1139,17 @@
     "        shuffle=False\n",
     "        )\n",
     "predicted_embeddings, output_name_encodings, average_loss, input_carl_indices = f.predict_embeddings(test_dataset, best_model, device, encoder_criterion)\n",
-    "input_carl_indices = [idx.cpu().detach().numpy() for idx_list in input_carl_indices for idx in idx_list]\n",
-    "predicted_embeddings = [emb.cpu().detach().numpy() for emb_list in predicted_embeddings for emb in emb_list]\n",
-    "output_name_encodings = [enc.cpu().detach().numpy() for enc_list in output_name_encodings for enc in enc_list]\n",
+    "# input_carl_indices = [idx.cpu().detach().numpy() for idx_list in input_carl_indices for idx in idx_list]\n",
+    "input_carl_indices = [idx for idx_list in input_carl_indices for idx in idx_list]\n",
+    "# predicted_embeddings = [emb.cpu().detach().numpy() for emb_list in predicted_embeddings for emb in emb_list]\n",
+    "predicted_embeddings = [emb for emb_list in predicted_embeddings for emb in emb_list]\n",
+    "# output_name_encodings = [enc.cpu().detach().numpy() for enc_list in output_name_encodings for enc in enc_list]\n",
+    "output_name_encodings = [enc for enc_list in output_name_encodings for enc in enc_list]\n",
     "test_preds_df = pd.DataFrame(predicted_embeddings)\n",
     "test_preds_df.insert(0, 'index', input_carl_indices)\n",
     "name_encodings_df = pd.DataFrame(output_name_encodings)\n",
-    "name_encodings_df.columns = test_carls.columns[-8:]\n",
+    "# name_encodings_df.columns = val_carls.columns[-8:]\n",
+    "name_encodings_df.columns = sorted_chem_names\n",
     "test_preds_df = pd.concat([test_preds_df, name_encodings_df], axis=1)"
    ]
   },
@@ -1211,11 +1159,11 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "file_path = '/mnt/usb/cmdunham/avg_bkg_carl_encoder_train_embeddings.csv'\n",
+    "file_path = '../data/encoder_embedding_predictions/train_preds.csv'\n",
     "train_preds_df.to_csv(file_path, index=False)\n",
-    "file_path = '/mnt/usb/cmdunham/avg_bkg_carl_encoder_val_embeddings.csv'\n",
+    "file_path = '../data/encoder_embedding_predictions/val_preds.csv'\n",
     "val_preds_df.to_csv(file_path, index=False)\n",
-    "file_path = '/mnt/usb/cmdunham/avg_bkg_carl_encoder_test_embeddings.csv'\n",
+    "file_path = '../data/encoder_embedding_predictions/test_preds.csv'\n",
     "test_preds_df.to_csv(file_path, index=False)"
    ]
   },
@@ -1225,7 +1173,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "encoder_path = '../models/carl_to_chemnet_encoder_used_for_results.pth'\n",
+    "encoder_path = 'trained_models/carl_to_chemnet_encoder_used_for_results.pth'\n",
     "torch.save(best_model.state_dict(), encoder_path)"
    ]
   },
@@ -1254,49 +1202,18 @@
     }
    ],
    "source": [
-    "# sorted_chem_names = list(train_carls.columns[-8:])\n",
-    "\n",
-    "# train_data = TensorDataset(train_carl_tensor, train_chem_encodings_tensor, train_embeddings_tensor, train_carl_indices_tensor)\n",
-    "\n",
-    "# # batch_size = best_hyperparams['batch_size']\n",
-    "# batch_size = 32\n",
-    "\n",
-    "f.plot_pca(\n",
-    "    train_data, batch_size, best_model, device, \n",
-    "    encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
-    "    name_smiles_embedding_df, 'Train', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
-    "    )"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 41,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# sorted_chem_names = list(val_carls.columns[-8:])\n",
+    "# # sorted_chem_names = list(train_carls.columns[-8:])\n",
     "\n",
-    "val_data = TensorDataset(val_carl_tensor, val_chem_encodings_tensor, val_embeddings_tensor, val_carl_indices_tensor)\n",
+    "# # train_data = TensorDataset(train_carl_tensor, train_chem_encodings_tensor, train_embeddings_tensor, train_carl_indices_tensor)\n",
     "\n",
-    "# batch_size = best_hyperparams['batch_size']\n",
-    "batch_size = 32\n",
+    "# # # batch_size = best_hyperparams['batch_size']\n",
+    "# # batch_size = 32\n",
     "\n",
-    "f.plot_pca(\n",
-    "    val_data, batch_size, best_model, device, \n",
-    "    encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
-    "    name_smiles_embedding_df, 'Validation', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
-    "    )"
+    "# f.plot_pca(\n",
+    "#     train_data, batch_size, best_model, device, \n",
+    "#     encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
+    "#     name_smiles_embedding_df, 'Train', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
+    "#     )"
    ]
   },
   {
@@ -1316,18 +1233,18 @@
     }
    ],
    "source": [
-    "sorted_chem_names = list(val_carls.columns[-8:])\n",
+    "# sorted_chem_names = list(val_carls.columns[-8:])\n",
     "\n",
-    "val_data = TensorDataset(val_carl_tensor, val_chem_encodings_tensor, val_embeddings_tensor, val_carl_indices_tensor)\n",
+    "# val_data = TensorDataset(val_carl_tensor, val_chem_encodings_tensor, val_embeddings_tensor, val_carl_indices_tensor)\n",
     "\n",
-    "# batch_size = best_hyperparams['batch_size']\n",
-    "batch_size = 32\n",
+    "# # batch_size = best_hyperparams['batch_size']\n",
+    "# batch_size = 32\n",
     "\n",
-    "f.plot_pca(\n",
-    "    val_data, batch_size, best_model, device, \n",
-    "    encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
-    "    name_smiles_embedding_df, 'Validation', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
-    "    )"
+    "# f.plot_pca(\n",
+    "#     val_data, batch_size, best_model, device, \n",
+    "#     encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
+    "#     name_smiles_embedding_df, 'Validation', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
+    "#     )"
    ]
   },
   {
@@ -1347,1289 +1264,19 @@
     }
    ],
    "source": [
-    "sorted_chem_names = list(test_carls.columns[-8:])\n",
-    "\n",
-    "test_data = TensorDataset(test_carl_tensor, test_chem_encodings_tensor, test_embeddings_tensor, test_carl_indices_tensor)\n",
-    "\n",
-    "# batch_size = best_hyperparams['batch_size']\n",
-    "batch_size = 32\n",
+    "# sorted_chem_names = list(test_carls.columns[-8:])\n",
     "\n",
-    "f.plot_pca(\n",
-    "    test_data, batch_size, best_model, device, \n",
-    "    encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
-    "    name_smiles_embedding_df, 'Test', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
-    "    )"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Unused Code:\n",
-    "---"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# # Calling plot_emb_pca directly without going through plot_pca. Buggy.\n",
-    "# dataset = DataLoader(\n",
-    "#         data, \n",
-    "#         batch_size=batch_size, \n",
-    "#         shuffle=False\n",
-    "#     )\n",
+    "# test_data = TensorDataset(test_carl_tensor, test_chem_encodings_tensor, test_embeddings_tensor, test_carl_indices_tensor)\n",
     "\n",
-    "# preds, name_encodings, avg_loss, _ = f.predict_embeddings(dataset, model, device, encoder_criterion)\n",
-    "# true_embeddings, predicted_embeddings_flattened, chem_names = preds_to_emb_pca_plot(\n",
-    "#     preds, name_encodings, sorted_chem_names, ims_embeddings_df,  \n",
-    "#     )\n",
-    "# preds_df = pd.DataFrame(predicted_embeddings_flattened)\n",
-    "# preds_df['Label'] = chem_names\n",
+    "# # batch_size = best_hyperparams['batch_size']\n",
+    "# batch_size = 32\n",
     "\n",
-    "# f.plot_emb_pca(\n",
-    "#     all_true_embeddings, preds_df, results_type='Test', input_type='IMS',\n",
-    "#     chemnet_embeddings_to_plot=true_embeddings, log_wandb=False, mse_insert=avg_loss,\n",
-    "#     show_wandb_run_name=False\n",
+    "# f.plot_pca(\n",
+    "#     test_data, batch_size, best_model, device, \n",
+    "#     encoder_criterion, sorted_chem_names, all_true_embeddings, \n",
+    "#     name_smiles_embedding_df, 'Test', input_type='IMS', show_wandb_run_name = False, log_wandb=False\n",
     "#     )"
    ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Train Loss:  1.1961571237917794e-05\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# train_dataset = DataLoader(\n",
-    "#     TensorDataset(\n",
-    "#         train_carl_tensor, \n",
-    "#         train_chem_encodings_tensor, \n",
-    "#         train_embeddings_tensor,\n",
-    "#         train_carl_indices_tensor,\n",
-    "#         ), \n",
-    "#         batch_size=best_hyperparams['batch_size'], \n",
-    "#         shuffle=True\n",
-    "#         )\n",
-    "# train_preds, train_name_encodings, train_avg_loss, train_input_carl_indices = predict_embeddings(train_dataset, encoder, device, encoder_criterion)\n",
-    "# train_true_embeddings, train_predicted_embeddings_flattened, train_chem_names = preds_to_emb_pca_plot(\n",
-    "#     train_preds, train_name_encodings, sorted_chem_names, name_smiles_embedding_df,  \n",
-    "#     )\n",
-    "# train_preds_df = pd.DataFrame(train_predicted_embeddings_flattened)\n",
-    "# train_preds_df['Label'] = train_chem_names\n",
-    "\n",
-    "# print('Train Loss: ', train_avg_loss)\n",
-    "# plot_emb_pca(all_true_embeddings, train_preds_df, log_wandb=False, chemnet_embeddings_to_plot=train_true_embeddings)\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Validation Loss:  6.433723416225333e-05\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# val_dataset = DataLoader(\n",
-    "#     TensorDataset(\n",
-    "#         val_carl_tensor, \n",
-    "#         val_chem_encodings_tensor, \n",
-    "#         val_embeddings_tensor,\n",
-    "#         val_carl_indices_tensor\n",
-    "#         ), \n",
-    "#         batch_size=best_hyperparams['batch_size'], \n",
-    "#         shuffle=False\n",
-    "#         )\n",
-    "\n",
-    "# val_preds, val_name_encodings, val_avg_loss, val_input_carl_indices = predict_embeddings(val_dataset, encoder, device, encoder_criterion)\n",
-    "# val_true_embeddings, val_predicted_embeddings_flattened, val_chem_names = preds_to_emb_pca_plot(\n",
-    "#     val_preds, val_name_encodings, sorted_chem_names, name_smiles_embedding_df,  \n",
-    "#     )\n",
-    "# val_preds_df = pd.DataFrame(val_predicted_embeddings_flattened)\n",
-    "# val_preds_df['Label'] = val_chem_names\n",
-    "\n",
-    "# print('Validation Loss: ', val_avg_loss)\n",
-    "# plot_emb_pca(all_true_embeddings, val_preds_df, log_wandb=False, chemnet_embeddings_to_plot=train_true_embeddings)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Test Loss:  4.781812557635492e-05\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# test_dataset = DataLoader(\n",
-    "#     TensorDataset(\n",
-    "#     test_carl_tensor, \n",
-    "#     test_chem_encodings_tensor, \n",
-    "#     test_embeddings_tensor,\n",
-    "#     test_carl_indices_tensor\n",
-    "#     ), \n",
-    "#     batch_size=best_hyperparams['batch_size'], \n",
-    "#     shuffle=False\n",
-    "#     )\n",
-    "\n",
-    "# test_preds, test_name_encodings, test_avg_loss, test_input_carl_indices = predict_embeddings(test_dataset, encoder, device, encoder_criterion)\n",
-    "# test_true_embeddings, test_predicted_embeddings_flattened, test_chem_names = preds_to_emb_pca_plot(\n",
-    "#     test_preds, test_name_encodings, sorted_chem_names, name_smiles_embedding_df,  \n",
-    "#     )\n",
-    "# test_preds_df = pd.DataFrame(test_predicted_embeddings_flattened)\n",
-    "# test_preds_df['Label'] = test_chem_names\n",
-    "\n",
-    "# print('Test Loss: ', test_avg_loss)\n",
-    "# plot_emb_pca(all_true_embeddings, test_preds_df, log_wandb=False, chemnet_embeddings_to_plot=train_true_embeddings)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Saving Carl Embeddings:\n",
-    "---"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# # saving carl embeddings to files\n",
-    "# train_input_carl_indices_list = [idx.cpu().detach().numpy() for idx_list in train_input_carl_indices for idx in idx_list]\n",
-    "# train_preds_df['index'] = train_input_carl_indices_list\n",
-    "# file_path = '/mnt/usb/cmdunham/carl_encoder_train_embeddings.csv'\n",
-    "# train_preds_df.to_csv(file_path, index=False)\n",
-    "\n",
-    "# val_input_carl_indices_list = [idx.cpu().detach().numpy() for idx_list in val_input_carl_indices for idx in idx_list]\n",
-    "# val_preds_df['index'] = val_input_carl_indices_list\n",
-    "# file_path = '/mnt/usb/cmdunham/carl_encoder_val_embeddings.csv'\n",
-    "# val_preds_df.to_csv(file_path, index=False)\n",
-    "\n",
-    "# test_input_carl_indices_list = [idx.cpu().detach().numpy() for idx_list in test_input_carl_indices for idx in idx_list]\n",
-    "# test_preds_df['index'] = test_input_carl_indices_list\n",
-    "# file_path = '/mnt/usb/cmdunham/carl_encoder_test_embeddings.csv'\n",
-    "# test_preds_df.to_csv(file_path, index=False)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Definitions:\n",
-    "---"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def flatten_and_bin(predicted_embeddings_batches):\n",
-    "    # Function to flatten the list of prediction batches and make each prediction binary\n",
-    "    binary_preds_list = []\n",
-    "    \n",
-    "    for batch in predicted_embeddings_batches:\n",
-    "        for encoding in batch:\n",
-    "            # Get the index of the maximum value\n",
-    "            max_index = torch.argmax(encoding)\n",
-    "            # Create a binary label with 1 in the index of the highest value's index in the encoding 0s in all other indices\n",
-    "            binary_pred = [0] * len(encoding)\n",
-    "            binary_pred[max_index] = 1\n",
-    "            binary_preds_list.append(binary_pred)\n",
-    "    \n",
-    "    return binary_preds_list"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def run_with_wandb(config, **kwargs):\n",
-    "    config.update(kwargs)\n",
-    "\n",
-    "    wandb.init(entity=config['wandb_entity'],\n",
-    "               project=config['wandb_project'],\n",
-    "               config=config)\n",
-    "\n",
-    "    # Set the number of threads\n",
-    "    torch.set_num_threads(config['threads'])\n",
-    "\n",
-    "    # Find out is there is a GPU available\n",
-    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
-    "    if not config['gpu']:\n",
-    "        device = torch.device('cpu')\n",
-    "    print(f'Using device: {device}')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def update_wandb_kwargs(wandb_kwargs, updates):\n",
-    "    for key in updates.keys():\n",
-    "        wandb_kwargs[key] = updates[key]\n",
-    "    return wandb_kwargs"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def train_one_epoch(train_dataset, device, model, criterion, optimizer, epoch, combo):\n",
-    "  epoch_training_loss = 0\n",
-    "\n",
-    "  predicted_embeddings = []\n",
-    "  output_name_encodings = []\n",
-    "\n",
-    "  for batch, name_encodings, true_embeddings, _ in train_dataset:\n",
-    "    # move inputs to device\n",
-    "    batch = batch.to(device)\n",
-    "    name_encodings = name_encodings.to(device)\n",
-    "    true_embeddings = true_embeddings.to(device)\n",
-    "\n",
-    "    # backprapogation\n",
-    "    optimizer.zero_grad()\n",
-    "\n",
-    "    # forward pass\n",
-    "    batch_predicted_embeddings = model(batch)\n",
-    "\n",
-    "    loss = criterion(batch_predicted_embeddings, true_embeddings)\n",
-    "    # accumulate epoch training loss\n",
-    "    epoch_training_loss += loss.item()\n",
-    "\n",
-    "    loss.backward()\n",
-    "    optimizer.step()\n",
-    "\n",
-    "    # at last epoch store output embeddings and corresponding labels to output list\n",
-    "    if (epoch + 1) == combo['epochs']:\n",
-    "      output_name_encodings.append(name_encodings)\n",
-    "      predicted_embeddings.append(batch_predicted_embeddings)\n",
-    "\n",
-    "  # divide by number of batches to calculate average loss\n",
-    "  average_loss = epoch_training_loss/len(train_dataset)\n",
-    "  if (epoch + 1) == combo['epochs']:\n",
-    "    return average_loss, predicted_embeddings, output_name_encodings\n",
-    "  else:\n",
-    "    return average_loss"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def preds_to_emb_pca_plot(\n",
-    "        predicted_embeddings, output_name_encodings, \n",
-    "        sorted_chem_names, emb_df, \n",
-    "        mass_spec_encoder_embeddings=False, mass_spec_chems=False\n",
-    "        ):\n",
-    "    \"\"\"\n",
-    "    Generate and plot a PCA visualization of predicted embeddings against corresponding ChemNet embeddings.\n",
-    "\n",
-    "    Parameters:\n",
-    "    ----------\n",
-    "    predicted_embeddings : list of list of torch.Tensor\n",
-    "        A nested list of predicted embeddings, where each inner list contains tensors for a batch.\n",
-    "\n",
-    "    output_name_encodings : list of list of torch.Tensor\n",
-    "        A nested list of one-hot encoded tensors representing the chemical names for the predicted embeddings.\n",
-    "\n",
-    "    sorted_chem_names : list of str\n",
-    "        A list of chemical names corresponding to the indices of the one-hot encodings.\n",
-    "\n",
-    "    emb_df : pandas.DataFrame\n",
-    "        A DataFrame containing true embeddings, with 'Embedding Floats' as one of its columns.\n",
-    "\n",
-    "    log_wandb : boolean \n",
-    "        True - log plot to wandb. False - do not log plot to wandb.\n",
-    "\n",
-    "    Returns:\n",
-    "    -------\n",
-    "    A tuple containing:\n",
-    "    - true_embeddings (pd.DataFrame): DataFrame of true embeddings used for comparison.\n",
-    "    - predicted_embeddings_flattened (list): Flattened list of predicted embeddings.\n",
-    "    - chem_names (list): List of chemical names corresponding to the predicted embeddings.\n",
-    "    \"\"\"\n",
-    "\n",
-    "    # Currently, preds and name encodings are lists of [n_batches, batch_size], flattening to lists of [n_samples]\n",
-    "    predicted_embeddings_flattened = [emb.cpu().detach().numpy() for emb_list in predicted_embeddings for emb in emb_list]\n",
-    "    chem_name_encodings_flattened = [enc.cpu() for enc_list in output_name_encodings for enc in enc_list]\n",
-    "\n",
-    "    # Get chemical names from encodings\n",
-    "    chem_names = [sorted_chem_names[list(encoding).index(1)] for encoding in chem_name_encodings_flattened]\n",
-    "\n",
-    "    if mass_spec_encoder_embeddings:\n",
-    "        for emb in mass_spec_encoder_embeddings:\n",
-    "            predicted_embeddings_flattened.append(torch.Tensor(emb))\n",
-    "        chem_names += mass_spec_chems\n",
-    "\n",
-    "    try:\n",
-    "        # making list of all embeddings and chem names except for BKG\n",
-    "        embeddings = [emb for emb in emb_df['Embedding Floats']][1:]\n",
-    "        cols = emb_df.index[1:]\n",
-    "        true_embeddings = pd.DataFrame(embeddings).T\n",
-    "        true_embeddings.columns = cols\n",
-    "        \n",
-    "    except KeyError as e:\n",
-    "        if str(e) == \"'Embedding Floats'\":\n",
-    "            true_embeddings = emb_df\n",
-    "    \n",
-    "    return (true_embeddings, predicted_embeddings_flattened, chem_names)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def predict_embeddings(dataset, model, device, criterion):\n",
-    "    total_loss = 0\n",
-    "\n",
-    "    model.eval() # Set model to evaluation mode\n",
-    "    predicted_embeddings = []\n",
-    "    output_name_encodings = []\n",
-    "    input_spectra_indices = []\n",
-    "\n",
-    "    with torch.no_grad():\n",
-    "        for batch, name_encodings, true_embeddings, spectra_indices in dataset:\n",
-    "            batch = batch.to(device)\n",
-    "            true_embeddings = true_embeddings.to(device)\n",
-    "\n",
-    "            batch_predicted_embeddings = model(batch)\n",
-    "            predicted_embeddings.append(batch_predicted_embeddings)\n",
-    "            output_name_encodings.append(name_encodings)\n",
-    "            input_spectra_indices.append(spectra_indices)\n",
-    "\n",
-    "            # print(batch_predicted_embeddings.shape, true_embeddings.shape)\n",
-    "\n",
-    "            loss = criterion(batch_predicted_embeddings, true_embeddings)\n",
-    "            # accumulate loss\n",
-    "            total_loss += loss.item()\n",
-    "\n",
-    "    # divide by number of batches to calculate average loss\n",
-    "    average_loss = total_loss/len(dataset)\n",
-    "    return predicted_embeddings, output_name_encodings, average_loss, input_spectra_indices"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def plot_emb_pca(\n",
-    "        all_embeddings, ims_embeddings, input_type, embedding_type=None, mass_spec_embeddings = None, log_wandb=False, \n",
-    "        chemnet_embeddings_to_plot=None, mse_insert=None, insert_position=[0.05, 0.05], show_wandb_run_name=True):\n",
-    "    \"\"\"\n",
-    "    Perform PCA on chemical embeddings and plot the transformed data, including IMS and Mass Spec embeddings if provided.\n",
-    "\n",
-    "    Parameters:\n",
-    "    ----------\n",
-    "    all_embeddings : pd.DataFrame\n",
-    "        A dataframe containing ChemNet embeddings for all chemicals. \n",
-    "        Each column represents one chemical's ChemNet embedding.\n",
-    "    ims_embeddings : pd.DataFrame\n",
-    "        A dataframe containing IMS (ion mobility spectrometry) embeddings. Must include a 'Label' column\n",
-    "        with chemical names and additional columns for embedding features.\n",
-    "    mass_spec_embeddings : pd.DataFrame, optional\n",
-    "        A dataframe containing mass spectrometry embeddings. Similar structure to `ims_embeddings`.\n",
-    "        Default is None, meaning mass spec embeddings are not included.\n",
-    "    log_wandb : bool, optional\n",
-    "        If True, logs the generated plot to Weights and Biases (wandb). Default is True.\n",
-    "    chemnet_embeddings_to_plot : pd.DataFrame, optional\n",
-    "        A dataframe containing ChemNet embeddings for all chemicals TO BE PLOTTED. \n",
-    "        Each column represents one chemical's ChemNet embedding.\n",
-    "\n",
-    "    Returns:\n",
-    "    -------\n",
-    "    None\n",
-    "        Displays the PCA scatter plot with ChemNet, IMS, and Mass Spec embeddings. \n",
-    "        Optionally logs the plot to wandb if `log_wandb` is True.\n",
-    "\n",
-    "    Notes:\n",
-    "    -----\n",
-    "    - PCA is performed on the transpose of `all_embeddings` so that embeddings for ims and mass spec data can be plotted to the same space.\n",
-    "    \"\"\" \n",
-    "    pca = PCA(n_components=2)\n",
-    "    pca.fit(all_embeddings.T)\n",
-    "\n",
-    "    if chemnet_embeddings_to_plot is not None:\n",
-    "        transformed_embeddings = pca.transform(chemnet_embeddings_to_plot.T)\n",
-    "        all_chemical_names = list(chemnet_embeddings_to_plot.columns)\n",
-    "    else:\n",
-    "        transformed_embeddings = pca.transform(all_embeddings.T) \n",
-    "        all_chemical_names = list(all_embeddings.columns)\n",
-    "\n",
-    "    _, ax = plt.subplots(figsize=(8,6))\n",
-    "\n",
-    "    # Create a color cycle for distinct colors\n",
-    "    color_cycle = plt.gca()._get_lines.prop_cycler\n",
-    "\n",
-    "    ims_labels = list(ims_embeddings['Label'])\n",
-    "    if mass_spec_embeddings is not None:\n",
-    "        mass_spec_labels=list(mass_spec_embeddings['Label'])\n",
-    "    else:\n",
-    "        mass_spec_labels = False\n",
-    "    \n",
-    "    # Scatter plot\n",
-    "    for chem in all_chemical_names:\n",
-    "        idx = all_chemical_names.index(chem)\n",
-    "        color = next(color_cycle)['color']\n",
-    "        # only label 1st 8 chemicals to avoid giant legend\n",
-    "        # ax.scatter(0,0, color = color, label=chem)\n",
-    "        if idx < 8:\n",
-    "            ax.scatter(transformed_embeddings[idx, 0], transformed_embeddings[idx, 1], color = color, label=chem)#, s=200)\n",
-    "        else:\n",
-    "            ax.scatter(transformed_embeddings[idx, 0], transformed_embeddings[idx, 1], color = color)#, s=75)\n",
-    "        # Transform ims_embeddings for the current chemical, if we have ims data for chem\n",
-    "        if chem in ims_labels:\n",
-    "            # transform all data for the given chemical. Exclude last col (label)\n",
-    "            ims_transformed = pca.transform(ims_embeddings[ims_embeddings['Label'] == chem].iloc[:, :-1])\n",
-    "            \n",
-    "            # Scatter plot for ims_embeddings with a different marker\n",
-    "            ax.scatter(ims_transformed[:, 0], ims_transformed[:, 1], marker='o', facecolors='none', edgecolors=color)#marker='x', color=color)#, s=75)\n",
-    "        # repeat for mass spec\n",
-    "        if mass_spec_labels:\n",
-    "            if chem in mass_spec_labels:\n",
-    "                # transform all data for the given chemical. Exclude last col (label)\n",
-    "                mass_spec_transformed = pca.transform(mass_spec_embeddings[mass_spec_embeddings['Label'] == chem].iloc[:, :-1].values)\n",
-    "                \n",
-    "                # Scatter plot for mass_spec_embeddings with a different marker\n",
-    "                ax.scatter(mass_spec_transformed[:, 0], mass_spec_transformed[:, 1], marker='*', color=color, s=75)\n",
-    "    # Add legend\n",
-    "    legend1 = ax.legend(loc='upper right', title='Label')\n",
-    "    ax.add_artist(legend1)\n",
-    "\n",
-    "    marker_legends = [\n",
-    "    plt.Line2D([0], [0], marker='o', color='w', label=embedding_type, markerfacecolor='black', markersize=6),\n",
-    "    plt.Line2D([0], [0], marker='o', color='w', label=\"IMS\", markerfacecolor='none', markeredgecolor='black', markersize=6),\n",
-    "    ]\n",
-    "    \n",
-    "    if mass_spec_embeddings is not None:\n",
-    "        marker_legends.append(plt.Line2D([0], [0], marker='*', color='w', label='Mass Spec', markerfacecolor='black', markersize=10))\n",
-    "\n",
-    "    # Add the second legend\n",
-    "    legend2 = ax.legend(handles=marker_legends, title='Marker Types', loc='upper left')\n",
-    "    ax.add_artist(legend2)\n",
-    "\n",
-    "    if mse_insert is not None:\n",
-    "        # Add mse text in the corner with a box\n",
-    "        plt.text(insert_position[0], insert_position[1], f'MSE: {format(mse_insert, \".2e\")}', \n",
-    "            transform=plt.gca().transAxes,  # Use axis coordinates\n",
-    "            fontsize=14,\n",
-    "            verticalalignment='bottom',  # Align text to the top\n",
-    "            horizontalalignment='left',  # Align text to the right\n",
-    "            bbox=dict(facecolor='white', alpha=0.5, edgecolor='black'))  # Box properties\n",
-    "    \n",
-    "    if show_wandb_run_name == True:\n",
-    "        run_name = wandb.run.name\n",
-    "        # Add wandb run text in the corner\n",
-    "        xlim = plt.xlim()\n",
-    "        ylim = plt.ylim()\n",
-    "        plt.text(xlim[1] - 0.01 * (xlim[1] - xlim[0]),  # x position with an offset\n",
-    "                ylim[0] + 0.01 * (ylim[1] - ylim[0]),  # y position with an offset\n",
-    "                f'WandB run: {run_name}', \n",
-    "                fontsize=8,\n",
-    "                verticalalignment='bottom',  # Align text to the top\n",
-    "                horizontalalignment='right',  # Align text to the right\n",
-    "                bbox=dict(facecolor='white', alpha=0.001, edgecolor='white'))\n",
-    "\n",
-    "    plt.xticks([])\n",
-    "    plt.yticks([])\n",
-    "    if embedding_type != 'ChemNet':\n",
-    "        plt.title(f'{embedding_type} vs. {input_type} Encoder Output PCA', fontsize=18)\n",
-    "    else:\n",
-    "        plt.title(f'ChemNet vs. {input_type} Encoder Output PCA', fontsize=18)\n",
-    "\n",
-    "    if log_wandb:\n",
-    "        plt.savefig('tmp_plot.png', format='png', dpi=300)\n",
-    "        wandb.log({'PCA of Predicted Chemical Embeddings': wandb.Image('tmp_plot.png')})\n",
-    "\n",
-    "    plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def plot_pca(\n",
-    "    data, batch_size, model, device, encoder_criterion, sorted_chem_names, \n",
-    "    all_embeddings_df, ims_embeddings_df, \n",
-    "    input_type, embedding_type='ChemNet',\n",
-    "    show_wandb_run_name=True, log_wandb=True, \n",
-    "    ):\n",
-    "    dataset = DataLoader(\n",
-    "        data, \n",
-    "        batch_size=batch_size, \n",
-    "        shuffle=False\n",
-    "    )\n",
-    "\n",
-    "    preds, name_encodings, avg_loss, _ = predict_embeddings(dataset, model, device, encoder_criterion)\n",
-    "    true_embeddings, predicted_embeddings_flattened, chem_names = preds_to_emb_pca_plot(\n",
-    "        preds, name_encodings, sorted_chem_names, ims_embeddings_df,  \n",
-    "        )\n",
-    "    preds_df = pd.DataFrame(predicted_embeddings_flattened)\n",
-    "    preds_df['Label'] = chem_names\n",
-    "    \n",
-    "    plot_emb_pca(\n",
-    "        all_embeddings_df, preds_df, input_type=input_type, \n",
-    "        embedding_type=embedding_type, log_wandb=log_wandb, \n",
-    "        chemnet_embeddings_to_plot=true_embeddings, mse_insert=avg_loss,\n",
-    "        show_wandb_run_name=show_wandb_run_name\n",
-    "        )"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "class Encoder(nn.Module):\n",
-    "  def __init__(self):\n",
-    "    super().__init__()\n",
-    "    self.encoder = nn.Sequential(\n",
-    "      nn.Linear(1676,1548),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1548,1420),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1420, 1292),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1292, 1164),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1164, 1036),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1036, 908),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(908, 780),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(780, 652),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(652, 512),\n",
-    "    )\n",
-    "\n",
-    "  def forward(self, x):\n",
-    "    x = self.encoder(x)\n",
-    "    return x"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def train_model(\n",
-    "        model_type, train_data, val_data, test_data, device, config, wandb_kwargs, \n",
-    "        all_embeddings_df, ims_embeddings_df, model_hyperparams, sorted_chem_names, \n",
-    "        encoder_path, save_emb_pca_to_wandb = True, early_stop_threshold=10, \n",
-    "        embedding_type='ChemNet', show_wandb_run_name=True\n",
-    "        ):\n",
-    "\n",
-    "    # loss to compare for each model. Starting at infinity so it will be replaced by first model's first epoch loss \n",
-    "    lowest_val_loss = np.inf\n",
-    "\n",
-    "    keys = model_hyperparams.keys()\n",
-    "    values = model_hyperparams.values()\n",
-    "\n",
-    "    # Generate all parameter combinations from model_config using itertools.product\n",
-    "    combinations = itertools.product(*values)\n",
-    "\n",
-    "    # Iterate through each parameter combination and run model \n",
-    "    for combo in combinations:\n",
-    "        if model_type == 'Encoder':\n",
-    "            encoder = Encoder().to(device)\n",
-    "        epochs_without_validation_improvement = 0\n",
-    "        combo = dict(zip(keys, combo))\n",
-    "\n",
-    "        train_dataset = DataLoader(train_data, batch_size=combo['batch_size'], shuffle=True)\n",
-    "        val_dataset = DataLoader(val_data, batch_size=combo['batch_size'], shuffle=False)\n",
-    "\n",
-    "        encoder_optimizer = torch.optim.AdamW(encoder.parameters(), lr = combo['learning_rate'])\n",
-    "        encoder_criterion = nn.MSELoss()\n",
-    "\n",
-    "        wandb_kwargs = update_wandb_kwargs(wandb_kwargs, combo)\n",
-    "\n",
-    "        run_with_wandb(config, **wandb_kwargs)\n",
-    "\n",
-    "        print('--------------------------')\n",
-    "        print('--------------------------')\n",
-    "        print('New run with hyperparameters:')\n",
-    "        for key in combo:\n",
-    "            print(key, ' : ', combo[key])\n",
-    "\n",
-    "        for epoch in range(combo['epochs']):\n",
-    "            if epochs_without_validation_improvement < early_stop_threshold:\n",
-    "                encoder.train(True)\n",
-    "\n",
-    "                # do a pass over the data\n",
-    "                # at last epoch get predicted embeddings and chem names\n",
-    "                if (epoch + 1) == combo['epochs']:\n",
-    "                    average_loss, _, _ = train_one_epoch(\n",
-    "                    train_dataset, device, encoder, encoder_criterion, encoder_optimizer, epoch, combo\n",
-    "                    )\n",
-    "                    # save output pca to weights and biases\n",
-    "                    if save_emb_pca_to_wandb:\n",
-    "                        # plot_pca gets predictions from trained model and plots them\n",
-    "                        plot_pca(\n",
-    "                            train_data, combo['batch_size'], encoder, device, \n",
-    "                            encoder_criterion, sorted_chem_names, all_embeddings_df, \n",
-    "                            ims_embeddings_df, 'Train', embedding_type, show_wandb_run_name\n",
-    "                            )\n",
-    "                        plot_pca(\n",
-    "                            test_data, combo['batch_size'], encoder, device, \n",
-    "                            encoder_criterion, sorted_chem_names, all_embeddings_df,\n",
-    "                            ims_embeddings_df, 'Test', embedding_type, show_wandb_run_name\n",
-    "                            )\n",
-    "                else:\n",
-    "                    average_loss = train_one_epoch(\n",
-    "                    train_dataset, device, encoder, encoder_criterion, encoder_optimizer, epoch, combo\n",
-    "                    )\n",
-    "\n",
-    "                epoch_val_loss = 0  \n",
-    "                # evaluate model on validation data\n",
-    "                encoder.eval() # Set model to evaluation mode\n",
-    "                with torch.no_grad():\n",
-    "                    for val_batch, val_name_encodings, val_true_embeddings, _ in val_dataset:\n",
-    "                        val_batch = val_batch.to(device)\n",
-    "                        val_name_encodings = val_name_encodings.to(device)\n",
-    "                        val_true_embeddings = val_true_embeddings.to(device)\n",
-    "\n",
-    "                        val_batch_predicted_embeddings = encoder(val_batch)\n",
-    "\n",
-    "                        val_loss = encoder_criterion(val_batch_predicted_embeddings, val_true_embeddings)\n",
-    "                        # accumulate epoch validation loss\n",
-    "                        epoch_val_loss += val_loss.item()\n",
-    "\n",
-    "                # divide by number of batches to calculate average loss\n",
-    "                val_average_loss = epoch_val_loss/len(val_dataset)\n",
-    "\n",
-    "                if val_average_loss < lowest_val_loss:\n",
-    "                    lowest_val_loss = val_average_loss\n",
-    "                    best_epoch = epoch + 1  # Store the best epoch\n",
-    "                    # Save the model state\n",
-    "                    torch.save(encoder.state_dict(), encoder_path)\n",
-    "                    best_hyperparams = combo\n",
-    "                    print(f'Saved best model at epoch {best_epoch}')\n",
-    "                    epochs_without_validation_improvement = 0\n",
-    "                \n",
-    "                else:\n",
-    "                    epochs_without_validation_improvement += 1\n",
-    "                # log losses to wandb\n",
-    "                wandb.log({\"Encoder Training Loss\": average_loss, \"Encoder Validation Loss\": val_average_loss})\n",
-    "\n",
-    "                if (epoch + 1) % 10 == 0:\n",
-    "                    print('Epoch[{}/{}]:'.format(epoch+1, combo['epochs']))\n",
-    "                    print(f'   Training loss: {average_loss}')\n",
-    "                    print(f'   Validation loss: {val_average_loss}')\n",
-    "                    print('-------------------------------------------')\n",
-    "            else:\n",
-    "                print(f'Validation loss has not improved in {epochs_without_validation_improvement} epochs. Stopping training at epoch {epoch}.')\n",
-    "                wandb.log({'Early Stopping Ecoch':epoch})\n",
-    "                plot_pca(\n",
-    "                    train_data, combo['batch_size'], encoder, device, \n",
-    "                    encoder_criterion, sorted_chem_names, all_embeddings_df, \n",
-    "                    ims_embeddings_df, 'Train', embedding_type, show_wandb_run_name\n",
-    "                    )\n",
-    "                plot_pca(\n",
-    "                    test_data, combo['batch_size'], encoder, device, \n",
-    "                    encoder_criterion, sorted_chem_names, all_embeddings_df,\n",
-    "                    ims_embeddings_df, 'Test', embedding_type, show_wandb_run_name\n",
-    "                    )\n",
-    "                break\n",
-    "        # if save_emb_pca_to_wandb:\n",
-    "        #     # true_embeddings, predicted_embeddings_flattened, chem_names = \n",
-    "        #     preds_to_emb_pca_plot(predicted_embeddings, output_name_encodings, sorted_chem_names, embedding_df)\n",
-    "\n",
-    "        # at last epoch print model architecture details (this will also show up in wandb log)\n",
-    "        print('-------------------------------------------')\n",
-    "        print('-------------------------------------------')\n",
-    "        print('Dataset: ', wandb_kwargs['dataset'])\n",
-    "        print('Target Embeddings: ', wandb_kwargs['target_embedding'])\n",
-    "        print('-------------------------------------------')\n",
-    "        print('-------------------------------------------')\n",
-    "        print(encoder)\n",
-    "        print('-------------------------------------------')\n",
-    "        print('-------------------------------------------')\n",
-    "\n",
-    "        wandb.finish()\n",
-    "\n",
-    "    print('Hyperparameters for best model: ')\n",
-    "    for key in best_hyperparams:\n",
-    "        print('   ', key, ' : ', best_hyperparams[key])\n",
-    "    \n",
-    "    return best_hyperparams\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def create_dataset_tensors(spectra_dataset, embedding_df, device, carl=False):\n",
-    "    # drop first two cols ('Unnamed:0' and 'index') and last 9 cols ('Label' and OneHot encodings) to get just spectra\n",
-    "    if carl: # carl dataset has no 'Unnamed: 0' column\n",
-    "        spectra = spectra_dataset.iloc[:,1:-9]\n",
-    "    else:\n",
-    "        spectra = spectra_dataset.iloc[:,2:-9]\n",
-    "    chem_encodings = spectra_dataset.iloc[:,-8:]\n",
-    "\n",
-    "    # create tensors of spectra, true embeddings, and chemical name encodings for train and val\n",
-    "    chem_labels = list(spectra_dataset['Label'])\n",
-    "    embeddings_tensor = torch.Tensor([embedding_df['Embedding Floats'][chem_name] for chem_name in chem_labels]).to(device)\n",
-    "    spectra_tensor = torch.Tensor(spectra.values).to(device)\n",
-    "    chem_encodings_tensor = torch.Tensor(chem_encodings.values).to(device)\n",
-    "    spectra_indices_tensor = torch.Tensor(spectra_dataset['index'].to_numpy()).to(device)\n",
-    "\n",
-    "    return embeddings_tensor, spectra_tensor, chem_encodings_tensor, spectra_indices_tensor"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Other:\n",
-    "---"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# set var deciding if embedding pca plot for this run is saved to wandb\n",
-    "save_emb_pca_to_wandb = True\n",
-    "\n",
-    "# Last 8 cols of the df are the chem names\n",
-    "sorted_chem_names = list(train_carls.columns[-8:])\n",
-    "\n",
-    "model_config = {\n",
-    "  'batch_size':[128],\n",
-    "  'epochs': [100],\n",
-    "  'learning_rate':[.00001]\n",
-    "  }\n",
-    "\n",
-    "# loss to compare for each model. Starting at something high so it will be replaced by first model's loss \n",
-    "lowest_loss = 100\n",
-    "\n",
-    "# model_config = {\n",
-    "#     'batch_size': [128],\n",
-    "#     'epochs': [10],\n",
-    "#     'learning_rate': [.00001]\n",
-    "# }\n",
-    "\n",
-    "keys = model_config.keys()\n",
-    "values = model_config.values()\n",
-    "\n",
-    "# Generate all parameter combinations from model_config using itertools.product\n",
-    "combinations = itertools.product(*values)\n",
-    "\n",
-    "# Iterate through each parameter combination and run model \n",
-    "for combo in combinations:\n",
-    "  combo = dict(zip(keys, combo))\n",
-    "\n",
-    "  train_dataset = DataLoader(TensorDataset(train_carl_tensor, train_chem_encodings_tensor, train_embeddings_tensor, train_carl_indices_tensor), batch_size=combo['batch_size'], shuffle=True)\n",
-    "  val_dataset = DataLoader(TensorDataset(val_carl_tensor, val_chem_encodings_tensor, val_embeddings_tensor, val_carl_indices_tensor), batch_size=combo['batch_size'], shuffle=False)\n",
-    "  encoder = Encoder().to(device)\n",
-    "\n",
-    "  encoder_optimizer = torch.optim.AdamW(encoder.parameters(), lr = combo['learning_rate'])\n",
-    "  encoder_criterion = nn.MSELoss()\n",
-    "\n",
-    "  wandb_kwargs = {\n",
-    "    'learning_rate': combo['learning_rate'],\n",
-    "    'epochs': combo['epochs'],\n",
-    "    'batch_size': combo['batch_size'],\n",
-    "    'model_architecture': 'carl_encoder',\n",
-    "    'optimizer':'AdamW',\n",
-    "    'loss': 'MSELoss'\n",
-    "  }\n",
-    "\n",
-    "  run_with_wandb(config, **wandb_kwargs)\n",
-    "\n",
-    "  print('--------------------------')\n",
-    "  print('--------------------------')\n",
-    "  print('New run with hyperparameters:')\n",
-    "  for key in combo:\n",
-    "    print(key, ' : ', combo[key])\n",
-    "\n",
-    "  for epoch in range(combo['epochs']):\n",
-    "    # Set model to training mode\n",
-    "    encoder.train(True)\n",
-    "\n",
-    "    # do a pass over the data\n",
-    "    # at last epoch get predicted embeddings and chem names\n",
-    "    if (epoch + 1) == combo['epochs']:\n",
-    "      average_loss, predicted_embeddings, output_name_encodings = train_one_epoch(\n",
-    "        train_dataset, device, encoder, encoder_criterion, encoder_optimizer, epoch, combo\n",
-    "        )\n",
-    "    else:\n",
-    "      average_loss = train_one_epoch(\n",
-    "        train_dataset, device, encoder, encoder_criterion, encoder_optimizer, epoch, combo\n",
-    "        )\n",
-    "\n",
-    "    epoch_val_loss = 0  \n",
-    "    # evaluate model on validation data\n",
-    "    encoder.eval() # Set model to evaluation mode\n",
-    "    with torch.no_grad():\n",
-    "      for val_batch, val_name_encodings, val_true_embeddings, val_spectra_indices in val_dataset:\n",
-    "        val_batch = val_batch.to(device)\n",
-    "        val_name_encodings = val_name_encodings.to(device)\n",
-    "        val_true_embeddings = val_true_embeddings.to(device)\n",
-    "\n",
-    "        val_batch_predicted_embeddings = encoder(val_batch)\n",
-    "\n",
-    "        val_loss = encoder_criterion(val_batch_predicted_embeddings, val_true_embeddings)\n",
-    "        # accumulate epoch validation loss\n",
-    "        epoch_val_loss += val_loss.item()\n",
-    "\n",
-    "    # divide by number of batches to calculate average loss\n",
-    "    val_average_loss = epoch_val_loss/len(val_dataset)\n",
-    "\n",
-    "    # log losses to wandb\n",
-    "    wandb.log({\"Encoder Training Loss\": average_loss, \"Encoder Validation Loss\": val_average_loss})\n",
-    "    # wandb.log({\"Encoder Training Loss\": average_loss})\n",
-    "\n",
-    "    if (epoch + 1) % 10 == 0:\n",
-    "      print('Epoch[{}/{}]:'.format(epoch+1, combo['epochs']))\n",
-    "      print(f'   Training loss: {average_loss}')\n",
-    "      print(f'   Validation loss: {val_average_loss}')\n",
-    "      print('-------------------------------------------')\n",
-    "\n",
-    "  if save_emb_pca_to_wandb:\n",
-    "    true_embeddings, predicted_embeddings_flattened, chem_names = preds_to_emb_pca_plot(predicted_embeddings, output_name_encodings, sorted_chem_names, name_smiles_embedding_df)\n",
-    "\n",
-    "  if average_loss < lowest_loss:\n",
-    "    best_hyperparams = combo\n",
-    "\n",
-    "  wandb.finish()\n",
-    "\n",
-    "print('Hyperparameters for best model: ')\n",
-    "for key in best_hyperparams:\n",
-    "  print('   ', key, ' : ', best_hyperparams[key])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def predict_embeddings(dataset, model, device, criterion):\n",
-    "    total_loss = 0\n",
-    "\n",
-    "    model.eval() # Set model to evaluation mode\n",
-    "    predicted_embeddings = []\n",
-    "    output_name_encodings = []\n",
-    "    input_spectra_indices = []\n",
-    "\n",
-    "    with torch.no_grad():\n",
-    "        for batch, name_encodings, true_embeddings, spectra_indices in dataset:\n",
-    "            batch = batch.to(device)\n",
-    "            true_embeddings = true_embeddings.to(device)\n",
-    "\n",
-    "            batch_predicted_embeddings = model(batch)\n",
-    "            predicted_embeddings.append(batch_predicted_embeddings)\n",
-    "            output_name_encodings.append(name_encodings)\n",
-    "            input_spectra_indices.append(spectra_indices)\n",
-    "\n",
-    "            loss = criterion(batch_predicted_embeddings, true_embeddings)\n",
-    "            # accumulate loss\n",
-    "            total_loss += loss.item()\n",
-    "\n",
-    "    # divide by number of batches to calculate average loss\n",
-    "    average_loss = total_loss/len(dataset)\n",
-    "    return predicted_embeddings, output_name_encodings, average_loss, input_spectra_indices"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def preds_to_emb_pca_plot(predicted_embeddings, output_name_encodings, sorted_chem_names, emb_df, mass_spec_encoder_embeddings=False, mass_spec_chems=False):\n",
-    "    \"\"\"\n",
-    "    Generate and plot a PCA visualization of predicted embeddings against corresponding ChemNet embeddings.\n",
-    "\n",
-    "    Parameters:\n",
-    "    ----------\n",
-    "    predicted_embeddings : list of list of torch.Tensor\n",
-    "        A nested list of predicted embeddings, where each inner list contains tensors for a batch.\n",
-    "\n",
-    "    output_name_encodings : list of list of torch.Tensor\n",
-    "        A nested list of one-hot encoded tensors representing the chemical names for the predicted embeddings.\n",
-    "\n",
-    "    sorted_chem_names : list of str\n",
-    "        A list of chemical names corresponding to the indices of the one-hot encodings.\n",
-    "\n",
-    "    emb_df : pandas.DataFrame\n",
-    "        A DataFrame containing true embeddings, with 'Embedding Floats' as one of its columns.\n",
-    "\n",
-    "    log_wandb : boolean \n",
-    "        True - log plot to wandb. False - do not log plot to wandb.\n",
-    "\n",
-    "    Returns:\n",
-    "    -------\n",
-    "    A tuple containing:\n",
-    "    - true_embeddings (pd.DataFrame): DataFrame of true embeddings used for comparison.\n",
-    "    - predicted_embeddings_flattened (list): Flattened list of predicted embeddings.\n",
-    "    - chem_names (list): List of chemical names corresponding to the predicted embeddings.\n",
-    "    \"\"\"\n",
-    "\n",
-    "    # Currently, preds and name encodings are lists of [n_batches, batch_size], flattening to lists of [n_samples]\n",
-    "    predicted_embeddings_flattened = [emb.cpu().detach().numpy() for emb_list in predicted_embeddings for emb in emb_list]\n",
-    "    chem_name_encodings_flattened = [enc.cpu() for enc_list in output_name_encodings for enc in enc_list]\n",
-    "\n",
-    "    # Get chemical names from encodings\n",
-    "    chem_names = [sorted_chem_names[list(encoding).index(1)] for encoding in chem_name_encodings_flattened]\n",
-    "\n",
-    "    if mass_spec_encoder_embeddings:\n",
-    "        for emb in mass_spec_encoder_embeddings:\n",
-    "            predicted_embeddings_flattened.append(torch.Tensor(emb))\n",
-    "        chem_names += mass_spec_chems\n",
-    "\n",
-    "    # making list of all embeddings and chem names except for BKG\n",
-    "    embeddings = [emb for emb in emb_df['Embedding Floats']][1:]\n",
-    "    cols = emb_df.index[1:]\n",
-    "    true_embeddings = pd.DataFrame(embeddings).T\n",
-    "    true_embeddings.columns = cols\n",
-    "    \n",
-    "    return (true_embeddings, predicted_embeddings_flattened, chem_names)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def train_one_epoch(train_dataset, device, model, criterion, optimizer, epoch, combo):\n",
-    "  epoch_training_loss = 0\n",
-    "\n",
-    "  predicted_embeddings = []\n",
-    "  output_name_encodings = []\n",
-    "\n",
-    "  for batch, name_encodings, true_embeddings, _ in train_dataset:\n",
-    "    # move inputs to device\n",
-    "    batch = batch.to(device)\n",
-    "    name_encodings = name_encodings.to(device)\n",
-    "    true_embeddings = true_embeddings.to(device)\n",
-    "\n",
-    "    # backprapogation\n",
-    "    optimizer.zero_grad()\n",
-    "\n",
-    "    # forward pass\n",
-    "    batch_predicted_embeddings = model(batch)\n",
-    "\n",
-    "    loss = criterion(batch_predicted_embeddings, true_embeddings)\n",
-    "    # accumulate epoch training loss\n",
-    "    epoch_training_loss += loss.item()\n",
-    "\n",
-    "    loss.backward()\n",
-    "    optimizer.step()\n",
-    "\n",
-    "    # at last epoch store output embeddings and corresponding labels to output list\n",
-    "    if (epoch + 1) == combo['epochs']:\n",
-    "      output_name_encodings.append(name_encodings)\n",
-    "      predicted_embeddings.append(batch_predicted_embeddings)\n",
-    "\n",
-    "  # divide by number of batches to calculate average loss\n",
-    "  average_loss = epoch_training_loss/len(train_dataset)\n",
-    "  if (epoch + 1) == combo['epochs']:\n",
-    "    return average_loss, predicted_embeddings, output_name_encodings\n",
-    "  else:\n",
-    "    return average_loss"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "class Encoder(nn.Module):\n",
-    "  def __init__(self):\n",
-    "    super().__init__()\n",
-    "    self.encoder = nn.Sequential(\n",
-    "      nn.Linear(1676,1548),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1548,1420),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1420, 1292),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1292, 1164),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1164, 1036),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(1036, 908),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(908, 780),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(780, 652),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(652, 512),\n",
-    "    )\n",
-    "\n",
-    "  def forward(self, x):\n",
-    "    x = self.encoder(x)\n",
-    "    return x"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Encoder for truncated dataset\n",
-    "class TruncatedEncoder(nn.Module):\n",
-    "  def __init__(self):\n",
-    "    super().__init__()\n",
-    "    self.encoder = nn.Sequential(\n",
-    "      nn.Linear(1032,968),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(968,904),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(904, 840),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(840, 776),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(776, 712),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(712, 648),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(648, 584),\n",
-    "      nn.LeakyReLU(inplace=True),\n",
-    "      nn.Linear(584, 512),\n",
-    "    )\n",
-    "\n",
-    "  def forward(self, x):\n",
-    "    x = self.encoder(x)\n",
-    "    return x"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def run_with_wandb(config, **kwargs):\n",
-    "    config.update(kwargs)\n",
-    "\n",
-    "    wandb.init(entity=config['wandb_entity'],\n",
-    "               project=config['wandb_project'],\n",
-    "               config=config)\n",
-    "\n",
-    "    # Set the number of threads\n",
-    "    torch.set_num_threads(config['threads'])\n",
-    "\n",
-    "    # Find out is there is a GPU available\n",
-    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
-    "    if not config['gpu']:\n",
-    "        device = torch.device('cpu')\n",
-    "    print(f'Using device: {device}')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def plot_emb_pca(all_embeddings, ims_embeddings, mass_spec_embeddings = None, log_wandb=True, chemnet_embeddings_to_plot=None):\n",
-    "    \"\"\"\n",
-    "    Perform PCA on chemical embeddings and plot the transformed data, including IMS and Mass Spec embeddings if provided.\n",
-    "\n",
-    "    Parameters:\n",
-    "    ----------\n",
-    "    all_embeddings : pd.DataFrame\n",
-    "        A dataframe containing ChemNet embeddings for all chemicals. \n",
-    "        Each column represents one chemical's ChemNet embedding.\n",
-    "    ims_embeddings : pd.DataFrame\n",
-    "        A dataframe containing IMS (ion mobility spectrometry) embeddings. Must include a 'Label' column\n",
-    "        with chemical names and additional columns for embedding features.\n",
-    "    mass_spec_embeddings : pd.DataFrame, optional\n",
-    "        A dataframe containing mass spectrometry embeddings. Similar structure to `ims_embeddings`.\n",
-    "        Default is None, meaning mass spec embeddings are not included.\n",
-    "    log_wandb : bool, optional\n",
-    "        If True, logs the generated plot to Weights and Biases (wandb). Default is True.\n",
-    "    chemnet_embeddings_to_plot : pd.DataFrame, optional\n",
-    "        A dataframe containing ChemNet embeddings for all chemicals TO BE PLOTTED. \n",
-    "        Each column represents one chemical's ChemNet embedding.\n",
-    "\n",
-    "    Returns:\n",
-    "    -------\n",
-    "    None\n",
-    "        Displays the PCA scatter plot with ChemNet, IMS, and Mass Spec embeddings. \n",
-    "        Optionally logs the plot to wandb if `log_wandb` is True.\n",
-    "\n",
-    "    Notes:\n",
-    "    -----\n",
-    "    - PCA is performed on the transpose of `all_embeddings` so that embeddings for ims and mass spec data can be plotted to the same space.\n",
-    "    \"\"\" \n",
-    "    pca = PCA(n_components=2)\n",
-    "    pca.fit(all_embeddings.T)\n",
-    "\n",
-    "    if chemnet_embeddings_to_plot is not None:\n",
-    "        transformed_embeddings = pca.transform(chemnet_embeddings_to_plot.T)\n",
-    "        all_chemical_names = list(chemnet_embeddings_to_plot.columns)\n",
-    "    else:\n",
-    "        transformed_embeddings = pca.transform(all_embeddings.T) \n",
-    "        all_chemical_names = list(all_embeddings.columns)\n",
-    "\n",
-    "    _, ax = plt.subplots(figsize=(8,6))\n",
-    "\n",
-    "    # Create a color cycle for distinct colors\n",
-    "    color_cycle = plt.gca()._get_lines.prop_cycler\n",
-    "\n",
-    "    ims_labels = list(ims_embeddings['Label'])\n",
-    "    if mass_spec_embeddings is not None:\n",
-    "        mass_spec_labels=list(mass_spec_embeddings['Label'])\n",
-    "    else:\n",
-    "        mass_spec_labels = False\n",
-    "    \n",
-    "    # Scatter plot\n",
-    "    for chem in all_chemical_names:\n",
-    "        idx = all_chemical_names.index(chem)\n",
-    "        color = next(color_cycle)['color']\n",
-    "        # only label 1st 8 chemicals to avoid giant legend\n",
-    "        # ax.scatter(0,0, color = color, label=chem)\n",
-    "        if idx < 8:\n",
-    "            ax.scatter(transformed_embeddings[idx, 0], transformed_embeddings[idx, 1], color = color, label=chem)#, s=200)\n",
-    "        else:\n",
-    "            ax.scatter(transformed_embeddings[idx, 0], transformed_embeddings[idx, 1], color = color)#, s=75)\n",
-    "        # Transform ims_embeddings for the current chemical, if we have ims data for chem\n",
-    "        if chem in ims_labels:\n",
-    "            # transform all data for the given chemical. Exclude last col (label)\n",
-    "            ims_transformed = pca.transform(ims_embeddings[ims_embeddings['Label'] == chem].iloc[:, :-1])\n",
-    "            \n",
-    "            # Scatter plot for ims_embeddings with a different marker\n",
-    "            ax.scatter(ims_transformed[:, 0], ims_transformed[:, 1], marker='o', facecolors='none', edgecolors=color)#marker='x', color=color)#, s=75)\n",
-    "        # repeat for mass spec\n",
-    "        if mass_spec_labels:\n",
-    "            if chem in mass_spec_labels:\n",
-    "                # transform all data for the given chemical. Exclude last col (label)\n",
-    "                mass_spec_transformed = pca.transform(mass_spec_embeddings[mass_spec_embeddings['Label'] == chem].iloc[:, :-1].values)\n",
-    "                \n",
-    "                # Scatter plot for mass_spec_embeddings with a different marker\n",
-    "                ax.scatter(mass_spec_transformed[:, 0], mass_spec_transformed[:, 1], marker='*', color=color, s=75)\n",
-    "    # Add legend\n",
-    "    legend1 = ax.legend(loc='upper right', title='Label')\n",
-    "    ax.add_artist(legend1)\n",
-    "\n",
-    "    marker_legends = [\n",
-    "    plt.Line2D([0], [0], marker='o', color='w', label='ChemNet', markerfacecolor='black', markersize=6),\n",
-    "    plt.Line2D([0], [0], marker='o', color='w', label='IMS', markerfacecolor='none', markeredgecolor='black', markersize=6),\n",
-    "    ]\n",
-    "    \n",
-    "    if mass_spec_embeddings is not None:\n",
-    "        marker_legends.append(plt.Line2D([0], [0], marker='*', color='w', label='Mass Spec', markerfacecolor='black', markersize=10))\n",
-    "\n",
-    "    # Add the second legend\n",
-    "    legend2 = ax.legend(handles=marker_legends, title='Marker Types', loc='upper left')\n",
-    "    ax.add_artist(legend2)\n",
-    "\n",
-    "    plt.xticks([])\n",
-    "    plt.yticks([])\n",
-    "    plt.title('ChemNet vs. Encoder Output PCA', fontsize=18)\n",
-    "\n",
-    "    if log_wandb:\n",
-    "        plt.savefig('tmp_plot.png', format='png', dpi=300)\n",
-    "        wandb.log({'PCA of Predicted Chemical Embeddings': wandb.Image('tmp_plot.png')})\n",
-    "\n",
-    "    plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def create_dataset_tensors(spectra_dataset, embedding_df, device, carl=False):\n",
-    "    # drop first two cols ('Unnamed:0' and 'index') and last 9 cols ('Label' and OneHot encodings) to get just spectra\n",
-    "    if carl: # carl dataset has no 'Unnamed: 0' column\n",
-    "        spectra = spectra_dataset.iloc[:,1:-9]\n",
-    "    else:\n",
-    "        spectra = spectra_dataset.iloc[:,2:-9]\n",
-    "    chem_encodings = spectra_dataset.iloc[:,-8:]\n",
-    "\n",
-    "    # create tensors of spectra, true embeddings, and chemical name encodings for train and val\n",
-    "    chem_labels = list(spectra_dataset['Label'])\n",
-    "    embeddings_tensor = torch.Tensor([embedding_df['Embedding Floats'][chem_name] for chem_name in chem_labels]).to(device)\n",
-    "    spectra_tensor = torch.Tensor(spectra.values).to(device)\n",
-    "    chem_encodings_tensor = torch.Tensor(chem_encodings.values).to(device)\n",
-    "    spectra_indices_tensor = torch.Tensor(spectra_dataset['index']).to(device)\n",
-    "\n",
-    "    return embeddings_tensor, spectra_tensor, chem_encodings_tensor, spectra_indices_tensor"
-   ]
   }
  ],
  "metadata": {
@@ -2648,7 +1295,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.10.0"
+   "version": "3.10.16"
   }
  },
  "nbformat": 4,
diff --git a/models/functions.py b/models/functions.py
index 8f58149..10e5171 100644
--- a/models/functions.py
+++ b/models/functions.py
@@ -1123,7 +1123,7 @@ def train_model(
 
         if lr_scheduler:
             # Initialize the learning rate scheduler with patience of 5 epochs 
-            scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', patience=5, factor=0.1)#, verbose=True)
+            scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', patience=5, factor=0.1, verbose=True)
 
         wandb_kwargs = update_wandb_kwargs(wandb_kwargs, combo)
 
@@ -1182,7 +1182,11 @@ def train_model(
                 val_average_loss = epoch_val_loss/len(val_dataset)
 
                 if lr_scheduler:
+                    # old_lr = get_last_lr(scheduler)
                     scheduler.step(val_average_loss)  # Pass the validation loss to the scheduler
+                    # new_lr = scheduler._last_lr
+                    # if new_lr != old_lr:
+                    # print('Old lr: {}. New lr: {}'.format(old_lr, new_lr))
                     # get the new learning rate (to give to wandb)
                     final_lr = optimizer.param_groups[0]['lr']
 
@@ -1196,11 +1200,11 @@ def train_model(
                         # if current epoch of current model is best performing (of all epochs and models so far), save model state
                         # Save the model state
                         torch.save(model.state_dict(), encoder_path)
-                        print(f'Saved best model at epoch {epoch}')
+                        print(f'Saved best model at epoch {epoch+1}')
                         lowest_val_loss = val_average_loss
                         best_hyperparams = combo
                     else:
-                        print(f'Model best validation loss at {epoch}')
+                        print(f'Model best validation loss at {epoch+1}')
                 
                 else:
                     epochs_without_validation_improvement += 1
@@ -1213,13 +1217,13 @@ def train_model(
                     wandb.log({"Generator Training Loss": average_loss, "Generator Validation Loss": val_average_loss})
 
                 if (epoch + 1) % 10 == 0 or epoch == 0:
-                    print('Epoch[{}/{}]:'.format(epoch, combo['epochs']))
+                    print('Epoch[{}/{}]:'.format(epoch+1, combo['epochs']))
                     print(f'   Training loss: {average_loss}')
                     print(f'   Validation loss: {val_average_loss}')
                     print('-------------------------------------------')
             else:
-                print(f'Validation loss has not improved in {epochs_without_validation_improvement} epochs. Stopping training at epoch {epoch}.')
-                wandb.log({'Early Stopping Ecoch':epoch})
+                print(f'Validation loss has not improved in {epochs_without_validation_improvement} epochs. Stopping training at epoch {epoch+1}.')
+                wandb.log({'Early Stopping Ecoch':epoch+1})
                 wandb.log({'Learning Rate at Final Epoch':final_lr})
                 plot_pca(
                     train_data, combo['batch_size'], model, device, 
@@ -1671,11 +1675,11 @@ def train_generator(
                         # if current epoch of current model is best performing (of all epochs and models so far), save model state
                         # Save the model state
                         torch.save(model.state_dict(), generator_path)
-                        print(f'Saved best model at epoch {epoch}')
+                        print(f'Saved best model at epoch {epoch+1}')
                         lowest_val_loss = val_average_loss
                         best_hyperparams = combo
                     else:
-                        print(f'Model best validation loss at {epoch}')
+                        print(f'Model best validation loss at {epoch+1}')
                 
                 else:
                     epochs_without_validation_improvement += 1
@@ -1689,8 +1693,8 @@ def train_generator(
                     print(f'   Validation loss: {val_average_loss}')
                     print('-------------------------------------------')
             else:
-                print(f'Validation loss has not improved in {epochs_without_validation_improvement} epochs. Stopping training at epoch {epoch}.')
-                wandb.log({'Early Stopping Ecoch':epoch})
+                print(f'Validation loss has not improved in {epochs_without_validation_improvement} epochs. Stopping training at epoch {epoch+1}.')
+                wandb.log({'Early Stopping Ecoch':epoch+1})
                 wandb.log({'Learning Rate at Final Epoch':final_lr})
                 train_dataset = DataLoader(train_data, batch_size=combo['batch_size'])
                 train_predicted_carls, train_output_name_encodings, _, _ = predict_embeddings(train_dataset, model, device, criterion)
diff --git a/models/tmp_plot.png b/models/tmp_plot.png
index 0a4fe95..cf7c96e 100644
Binary files a/models/tmp_plot.png and b/models/tmp_plot.png differ
diff --git a/models/trained_models/carl_to_chemnet_encoder.pth b/models/trained_models/carl_to_chemnet_encoder.pth
index 2312aeb..56afdb3 100644
Binary files a/models/trained_models/carl_to_chemnet_encoder.pth and b/models/trained_models/carl_to_chemnet_encoder.pth differ
diff --git a/models/trained_models/carl_to_chemnet_encoder_used_for_results.pth b/models/trained_models/carl_to_chemnet_encoder_used_for_results.pth
index 8033065..617bf6f 100644
Binary files a/models/trained_models/carl_to_chemnet_encoder_used_for_results.pth and b/models/trained_models/carl_to_chemnet_encoder_used_for_results.pth differ
diff --git a/models/wandb/debug-internal.log b/models/wandb/debug-internal.log
index 25aa4a6..88562fe 120000
--- a/models/wandb/debug-internal.log
+++ b/models/wandb/debug-internal.log
@@ -1 +1 @@
-run-20250106_105719-natn8von/logs/debug-internal.log
\ No newline at end of file
+run-20250204_082411-eu0pxby7/logs/debug-internal.log
\ No newline at end of file
diff --git a/models/wandb/debug.log b/models/wandb/debug.log
index 1abe3db..e7fbb10 120000
--- a/models/wandb/debug.log
+++ b/models/wandb/debug.log
@@ -1 +1 @@
-run-20250106_105719-natn8von/logs/debug.log
\ No newline at end of file
+run-20250204_082411-eu0pxby7/logs/debug.log
\ No newline at end of file
diff --git a/models/wandb/latest-run b/models/wandb/latest-run
index 40dad3c..0087dda 120000
--- a/models/wandb/latest-run
+++ b/models/wandb/latest-run
@@ -1 +1 @@
-run-20250106_105719-natn8von
\ No newline at end of file
+run-20250204_082411-eu0pxby7
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index 95b9d39..3791dc3 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -16,7 +16,7 @@ rdkit==2023.9.5
 requests==2.31.0
 scikit-learn==1.2.2
 seaborn==0.13.1
-torchmetrics==1.3.1
-torch==2.1.0
-torchvision==0.16.0
+# torchmetrics==1.3.1 # make sure these are correct
+# torch==2.1.0
+# torchvision==0.16.0
 wandb==0.17.0
\ No newline at end of file
