diff --git a/data_preprocessing/ims_data_preprocessing.ipynb b/data_preprocessing/ims_data_preprocessing.ipynb
index 5bf557d8..0b93f8c2 100644
--- a/data_preprocessing/ims_data_preprocessing.ipynb
+++ b/data_preprocessing/ims_data_preprocessing.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -22,7 +22,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -395,7 +395,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -414,7 +414,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
@@ -605,7 +605,7 @@
        "[5 rows x 1686 columns]"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -622,30 +622,40 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 19,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(222519, 1686) (74173, 1686) (74173, 1686)\n"
+     ]
+    }
+   ],
    "source": [
     "# divide into train and test data\n",
     "train_val, test = train_test_split(spectra_and_encodings, test_size=.2, random_state = 22)\n",
     "# divide train into train and validation data\n",
-    "train, val = train_test_split(train_val, test_size=.1, random_state=22)"
+    "train, val = train_test_split(train_val, test_size=.25, random_state=22)\n",
+    "\n",
+    "print(train.shape, val.shape, test.shape)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 17,
    "metadata": {},
    "outputs": [],
    "source": [
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/train_data.csv'\n",
-    "# train.to_csv(file_path)\n",
+    "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/train_data.csv'\n",
+    "train.to_csv(file_path)\n",
     "\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_data.csv'\n",
-    "# val.to_csv(file_path)\n",
+    "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_data.csv'\n",
+    "val.to_csv(file_path)\n",
     "\n",
-    "# file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/test_data.csv'\n",
-    "# test.to_csv(file_path)"
+    "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/test_data.csv'\n",
+    "test.to_csv(file_path)"
    ]
   },
   {
@@ -769,20 +779,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 17,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Selected GPU ID: 1\n",
+      "Selected GPU ID: 0\n",
       "  Name: NVIDIA GeForce RTX 4090\n",
-      "  Memory Free: 19753.0 MB\n",
-      "  Memory Used: 4463.0 MB\n",
-      "  GPU Load: 0.00%\n",
-      "Current device ID:  cuda:1\n",
-      "PyTorch current device ID: 1\n",
+      "  Memory Free: 15626.0 MB\n",
+      "  Memory Used: 8590.0 MB\n",
+      "  GPU Load: 67.00%\n",
+      "Current device ID:  cuda:0\n",
+      "PyTorch current device ID: 0\n",
       "PyTorch current device name: NVIDIA GeForce RTX 4090\n"
      ]
     }
@@ -819,7 +829,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 18,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -838,7 +848,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 19,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -850,7 +860,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 20,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -887,9 +897,33 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 73,
+   "execution_count": 21,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[21], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m file_path\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/mnt/usb/cmdunham/preprocessed_ims_data/train_carls.csv\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      2\u001b[0m differences_df \u001b[38;5;241m=\u001b[39m generate_differences_df(train, background_sample)\n\u001b[0;32m----> 3\u001b[0m \u001b[43mdifferences_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheader\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m file_path\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/mnt/usb/cmdunham/preprocessed_ims_data/val_carls.csv\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      6\u001b[0m differences_df \u001b[38;5;241m=\u001b[39m generate_differences_df(val, background_sample)\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/util/_decorators.py:211\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    210\u001b[0m         kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[0;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/core/generic.py:3720\u001b[0m, in \u001b[0;36mNDFrame.to_csv\u001b[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, decimal, errors, storage_options)\u001b[0m\n\u001b[1;32m   3709\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m, ABCDataFrame) \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mto_frame()\n\u001b[1;32m   3711\u001b[0m formatter \u001b[38;5;241m=\u001b[39m DataFrameFormatter(\n\u001b[1;32m   3712\u001b[0m     frame\u001b[38;5;241m=\u001b[39mdf,\n\u001b[1;32m   3713\u001b[0m     header\u001b[38;5;241m=\u001b[39mheader,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3717\u001b[0m     decimal\u001b[38;5;241m=\u001b[39mdecimal,\n\u001b[1;32m   3718\u001b[0m )\n\u001b[0;32m-> 3720\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mDataFrameRenderer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mformatter\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_csv\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   3721\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpath_or_buf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3722\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlineterminator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlineterminator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3723\u001b[0m \u001b[43m    \u001b[49m\u001b[43msep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msep\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3724\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3725\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3726\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcompression\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3727\u001b[0m \u001b[43m    \u001b[49m\u001b[43mquoting\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mquoting\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3728\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3729\u001b[0m \u001b[43m    \u001b[49m\u001b[43mindex_label\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex_label\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3730\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3731\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunksize\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunksize\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3732\u001b[0m \u001b[43m    \u001b[49m\u001b[43mquotechar\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mquotechar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3733\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdate_format\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdate_format\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3734\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdoublequote\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdoublequote\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3735\u001b[0m \u001b[43m    \u001b[49m\u001b[43mescapechar\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mescapechar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3736\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3737\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/util/_decorators.py:211\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    210\u001b[0m         kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[0;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/io/formats/format.py:1189\u001b[0m, in \u001b[0;36mDataFrameRenderer.to_csv\u001b[0;34m(self, path_or_buf, encoding, sep, columns, index_label, mode, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, errors, storage_options)\u001b[0m\n\u001b[1;32m   1168\u001b[0m     created_buffer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m   1170\u001b[0m csv_formatter \u001b[38;5;241m=\u001b[39m CSVFormatter(\n\u001b[1;32m   1171\u001b[0m     path_or_buf\u001b[38;5;241m=\u001b[39mpath_or_buf,\n\u001b[1;32m   1172\u001b[0m     lineterminator\u001b[38;5;241m=\u001b[39mlineterminator,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1187\u001b[0m     formatter\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfmt,\n\u001b[1;32m   1188\u001b[0m )\n\u001b[0;32m-> 1189\u001b[0m \u001b[43mcsv_formatter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1191\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m created_buffer:\n\u001b[1;32m   1192\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(path_or_buf, StringIO)\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/io/formats/csvs.py:261\u001b[0m, in \u001b[0;36mCSVFormatter.save\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    241\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m get_handle(\n\u001b[1;32m    242\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfilepath_or_buffer,\n\u001b[1;32m    243\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmode,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    249\u001b[0m \n\u001b[1;32m    250\u001b[0m     \u001b[38;5;66;03m# Note: self.encoding is irrelevant here\u001b[39;00m\n\u001b[1;32m    251\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwriter \u001b[38;5;241m=\u001b[39m csvlib\u001b[38;5;241m.\u001b[39mwriter(\n\u001b[1;32m    252\u001b[0m         handles\u001b[38;5;241m.\u001b[39mhandle,\n\u001b[1;32m    253\u001b[0m         lineterminator\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlineterminator,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    258\u001b[0m         quotechar\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mquotechar,\n\u001b[1;32m    259\u001b[0m     )\n\u001b[0;32m--> 261\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_save\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/io/formats/csvs.py:266\u001b[0m, in \u001b[0;36mCSVFormatter._save\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    264\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_need_to_save_header:\n\u001b[1;32m    265\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_save_header()\n\u001b[0;32m--> 266\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_save_body\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/io/formats/csvs.py:304\u001b[0m, in \u001b[0;36mCSVFormatter._save_body\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    302\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m start_i \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m end_i:\n\u001b[1;32m    303\u001b[0m     \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m--> 304\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_save_chunk\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart_i\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_i\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/io/formats/csvs.py:311\u001b[0m, in \u001b[0;36mCSVFormatter._save_chunk\u001b[0;34m(self, start_i, end_i)\u001b[0m\n\u001b[1;32m    308\u001b[0m slicer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mslice\u001b[39m(start_i, end_i)\n\u001b[1;32m    309\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39miloc[slicer]\n\u001b[0;32m--> 311\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_native_types\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_number_format\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    312\u001b[0m data \u001b[38;5;241m=\u001b[39m [res\u001b[38;5;241m.\u001b[39miget_values(i) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(res\u001b[38;5;241m.\u001b[39mitems))]\n\u001b[1;32m    314\u001b[0m ix \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdata_index[slicer]\u001b[38;5;241m.\u001b[39m_format_native_types(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_number_format)\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/core/internals/managers.py:502\u001b[0m, in \u001b[0;36mBaseBlockManager.to_native_types\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    497\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mto_native_types\u001b[39m(\u001b[38;5;28mself\u001b[39m: T, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m T:\n\u001b[1;32m    498\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    499\u001b[0m \u001b[38;5;124;03m    Convert values to native types (strings / python objects) that are used\u001b[39;00m\n\u001b[1;32m    500\u001b[0m \u001b[38;5;124;03m    in formatting (repr / csv).\u001b[39;00m\n\u001b[1;32m    501\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 502\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mto_native_types\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/core/internals/managers.py:352\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    351\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 352\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mTypeError\u001b[39;00m, \u001b[38;5;167;01mNotImplementedError\u001b[39;00m):\n\u001b[1;32m    354\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ignore_failures:\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/core/internals/blocks.py:541\u001b[0m, in \u001b[0;36mBlock.to_native_types\u001b[0;34m(self, na_rep, quoting, **kwargs)\u001b[0m\n\u001b[1;32m    538\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[1;32m    539\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mto_native_types\u001b[39m(\u001b[38;5;28mself\u001b[39m, na_rep\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnan\u001b[39m\u001b[38;5;124m\"\u001b[39m, quoting\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Block:\n\u001b[1;32m    540\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"convert to our native types format\"\"\"\u001b[39;00m\n\u001b[0;32m--> 541\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43mto_native_types\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_rep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_rep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mquoting\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mquoting\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    542\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmake_block(result)\n",
+      "File \u001b[0;32m~/ChemicalDataGeneration/chem_data_gen/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2323\u001b[0m, in \u001b[0;36mto_native_types\u001b[0;34m(values, na_rep, quoting, float_format, decimal, **kwargs)\u001b[0m\n\u001b[1;32m   2320\u001b[0m mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m   2322\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m quoting:\n\u001b[0;32m-> 2323\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43mvalues\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2324\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   2325\u001b[0m     values \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(values, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    }
+   ],
    "source": [
     "file_path='/mnt/usb/cmdunham/preprocessed_ims_data/train_carls.csv'\n",
     "differences_df = generate_differences_df(train, background_sample)\n",
diff --git a/models/carl_encoder.ipynb b/models/carl_encoder.ipynb
index 6d2d2066..4ffcf876 100644
--- a/models/carl_encoder.ipynb
+++ b/models/carl_encoder.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -26,7 +26,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -35,7 +35,7 @@
        "<module 'functions' from '/home/cmdunham/ChemicalDataGeneration/models/functions.py'>"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -58,7 +58,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -72,209 +72,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>index</th>\n",
-       "      <th>p_184</th>\n",
-       "      <th>p_185</th>\n",
-       "      <th>p_186</th>\n",
-       "      <th>p_187</th>\n",
-       "      <th>p_188</th>\n",
-       "      <th>p_189</th>\n",
-       "      <th>p_190</th>\n",
-       "      <th>p_191</th>\n",
-       "      <th>p_192</th>\n",
-       "      <th>...</th>\n",
-       "      <th>n_1021</th>\n",
-       "      <th>Label</th>\n",
-       "      <th>DEB</th>\n",
-       "      <th>DEM</th>\n",
-       "      <th>DMMP</th>\n",
-       "      <th>DPM</th>\n",
-       "      <th>DtBP</th>\n",
-       "      <th>JP8</th>\n",
-       "      <th>MES</th>\n",
-       "      <th>TEPO</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>1297539</td>\n",
-       "      <td>-12.0</td>\n",
-       "      <td>-14.0</td>\n",
-       "      <td>-16.0</td>\n",
-       "      <td>-20.0</td>\n",
-       "      <td>-21.0</td>\n",
-       "      <td>-22.0</td>\n",
-       "      <td>-22.0</td>\n",
-       "      <td>-24.0</td>\n",
-       "      <td>-25.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>-8.0</td>\n",
-       "      <td>DtBP</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>1297539</td>\n",
-       "      <td>-12.0</td>\n",
-       "      <td>-10.0</td>\n",
-       "      <td>-7.0</td>\n",
-       "      <td>-4.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>7.0</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>DtBP</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>1344903</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>-2.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>-7.0</td>\n",
-       "      <td>DMMP</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>1344903</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>6.0</td>\n",
-       "      <td>11.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>24.0</td>\n",
-       "      <td>27.0</td>\n",
-       "      <td>30.0</td>\n",
-       "      <td>31.0</td>\n",
-       "      <td>31.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>16.0</td>\n",
-       "      <td>DMMP</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>1221071</td>\n",
-       "      <td>10.0</td>\n",
-       "      <td>12.0</td>\n",
-       "      <td>15.0</td>\n",
-       "      <td>14.0</td>\n",
-       "      <td>17.0</td>\n",
-       "      <td>19.0</td>\n",
-       "      <td>22.0</td>\n",
-       "      <td>23.0</td>\n",
-       "      <td>26.0</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>TEPO</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>5 rows × 1686 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "     index  p_184  p_185  p_186  p_187  p_188  p_189  p_190  p_191  p_192  \\\n",
-       "0  1297539  -12.0  -14.0  -16.0  -20.0  -21.0  -22.0  -22.0  -24.0  -25.0   \n",
-       "1  1297539  -12.0  -10.0   -7.0   -4.0    1.0    3.0    7.0    6.0    8.0   \n",
-       "2  1344903    2.0    2.0    2.0    1.0    2.0    2.0    1.0    1.0   -2.0   \n",
-       "3  1344903    2.0    6.0   11.0   17.0   24.0   27.0   30.0   31.0   31.0   \n",
-       "4  1221071   10.0   12.0   15.0   14.0   17.0   19.0   22.0   23.0   26.0   \n",
-       "\n",
-       "   ...  n_1021  Label  DEB  DEM  DMMP  DPM  DtBP  JP8  MES  TEPO  \n",
-       "0  ...    -8.0   DtBP  0.0  0.0   0.0  0.0   1.0  0.0  0.0   0.0  \n",
-       "1  ...    15.0   DtBP  0.0  0.0   0.0  0.0   1.0  0.0  0.0   0.0  \n",
-       "2  ...    -7.0   DMMP  0.0  0.0   1.0  0.0   0.0  0.0  0.0   0.0  \n",
-       "3  ...    16.0   DMMP  0.0  0.0   1.0  0.0   0.0  0.0  0.0   0.0  \n",
-       "4  ...     0.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
-       "\n",
-       "[5 rows x 1686 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "train_carls.head()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -293,7 +91,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -381,7 +179,7 @@
        "DMMP        [0.12106811, 0.00294244, -0.14450458, 0.072665...  "
       ]
      },
-     "execution_count": 6,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -394,7 +192,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -413,7 +211,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -618,7 +416,7 @@
        "[5 rows x 36 columns]"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -648,20 +446,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 10,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Selected GPU ID: 0\n",
+      "Selected GPU ID: 1\n",
       "  Name: NVIDIA GeForce RTX 4090\n",
-      "  Memory Free: 24185.0 MB\n",
-      "  Memory Used: 31.0 MB\n",
+      "  Memory Free: 19889.0 MB\n",
+      "  Memory Used: 4327.0 MB\n",
       "  GPU Load: 0.00%\n",
-      "Current device ID:  cuda:0\n",
-      "PyTorch current device ID: 0\n",
+      "Current device ID:  cuda:1\n",
+      "PyTorch current device ID: 1\n",
       "PyTorch current device name: NVIDIA GeForce RTX 4090\n"
      ]
     }
@@ -706,7 +504,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -717,7 +515,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -731,7 +529,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [],
    "source": [
diff --git a/models/ims_encoder.ipynb b/models/ims_encoder.ipynb
index 0a5bcb69..970b25d9 100644
--- a/models/ims_encoder.ipynb
+++ b/models/ims_encoder.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 38,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -33,7 +33,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 39,
    "metadata": {},
    "outputs": [
     {
@@ -42,7 +42,7 @@
        "<module 'functions' from '/home/cmdunham/ChemicalDataGeneration/models/functions.py'>"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 39,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -65,7 +65,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -73,13 +73,13 @@
     "train = pd.read_csv(file_path)\n",
     "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/val_data.csv'\n",
     "val = pd.read_csv(file_path)\n",
-    "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/test_data.csv'\n",
+    "file_path = '/mnt/usb/cmdunham/preprocessed_ims_data/test_data_.csv'\n",
     "test = pd.read_csv(file_path)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 41,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -89,7 +89,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 42,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -110,7 +110,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 43,
    "metadata": {},
    "outputs": [
     {
@@ -308,7 +308,7 @@
        "[5 rows x 513 columns]"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 43,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -319,7 +319,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 44,
    "metadata": {},
    "outputs": [
     {
@@ -369,66 +369,66 @@
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
-       "      <td>272149</td>\n",
-       "      <td>1297539</td>\n",
-       "      <td>94.0</td>\n",
-       "      <td>96.0</td>\n",
+       "      <td>287346</td>\n",
+       "      <td>1333416</td>\n",
+       "      <td>81.0</td>\n",
+       "      <td>84.0</td>\n",
+       "      <td>88.0</td>\n",
+       "      <td>93.0</td>\n",
        "      <td>99.0</td>\n",
-       "      <td>101.0</td>\n",
-       "      <td>105.0</td>\n",
-       "      <td>109.0</td>\n",
+       "      <td>104.0</td>\n",
+       "      <td>110.0</td>\n",
        "      <td>115.0</td>\n",
-       "      <td>120.0</td>\n",
        "      <td>...</td>\n",
-       "      <td>-5.0</td>\n",
-       "      <td>DtBP</td>\n",
+       "      <td>-4.0</td>\n",
+       "      <td>TEPO</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
+       "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
-       "      <td>293336</td>\n",
-       "      <td>1344903</td>\n",
-       "      <td>108.0</td>\n",
-       "      <td>112.0</td>\n",
-       "      <td>117.0</td>\n",
-       "      <td>122.0</td>\n",
-       "      <td>128.0</td>\n",
-       "      <td>133.0</td>\n",
-       "      <td>138.0</td>\n",
-       "      <td>145.0</td>\n",
+       "      <td>244422</td>\n",
+       "      <td>1226215</td>\n",
+       "      <td>81.0</td>\n",
+       "      <td>84.0</td>\n",
+       "      <td>87.0</td>\n",
+       "      <td>90.0</td>\n",
+       "      <td>92.0</td>\n",
+       "      <td>97.0</td>\n",
+       "      <td>100.0</td>\n",
+       "      <td>106.0</td>\n",
        "      <td>...</td>\n",
-       "      <td>-4.0</td>\n",
-       "      <td>DMMP</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>TEPO</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
+       "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
-       "      <td>240982</td>\n",
-       "      <td>1221071</td>\n",
-       "      <td>116.0</td>\n",
-       "      <td>122.0</td>\n",
-       "      <td>130.0</td>\n",
-       "      <td>135.0</td>\n",
-       "      <td>143.0</td>\n",
-       "      <td>150.0</td>\n",
-       "      <td>159.0</td>\n",
-       "      <td>167.0</td>\n",
+       "      <td>320966</td>\n",
+       "      <td>1430326</td>\n",
+       "      <td>85.0</td>\n",
+       "      <td>88.0</td>\n",
+       "      <td>91.0</td>\n",
+       "      <td>96.0</td>\n",
+       "      <td>98.0</td>\n",
+       "      <td>101.0</td>\n",
+       "      <td>106.0</td>\n",
+       "      <td>110.0</td>\n",
        "      <td>...</td>\n",
-       "      <td>3.0</td>\n",
+       "      <td>2.0</td>\n",
        "      <td>TEPO</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
@@ -441,43 +441,44 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
-       "      <td>226406</td>\n",
-       "      <td>1173350</td>\n",
-       "      <td>95.0</td>\n",
-       "      <td>101.0</td>\n",
-       "      <td>106.0</td>\n",
-       "      <td>112.0</td>\n",
-       "      <td>119.0</td>\n",
-       "      <td>124.0</td>\n",
-       "      <td>128.0</td>\n",
-       "      <td>132.0</td>\n",
+       "      <td>231490</td>\n",
+       "      <td>1191507</td>\n",
+       "      <td>130.0</td>\n",
+       "      <td>133.0</td>\n",
+       "      <td>138.0</td>\n",
+       "      <td>144.0</td>\n",
+       "      <td>149.0</td>\n",
+       "      <td>156.0</td>\n",
+       "      <td>166.0</td>\n",
+       "      <td>175.0</td>\n",
        "      <td>...</td>\n",
-       "      <td>-3.0</td>\n",
-       "      <td>DtBP</td>\n",
+       "      <td>8.0</td>\n",
+       "      <td>TEPO</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
+       "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
-       "      <td>311847</td>\n",
-       "      <td>1416666</td>\n",
-       "      <td>105.0</td>\n",
-       "      <td>109.0</td>\n",
-       "      <td>114.0</td>\n",
-       "      <td>119.0</td>\n",
-       "      <td>125.0</td>\n",
-       "      <td>131.0</td>\n",
-       "      <td>138.0</td>\n",
-       "      <td>143.0</td>\n",
+       "      <td>119707</td>\n",
+       "      <td>689897</td>\n",
+       "      <td>55.0</td>\n",
+       "      <td>58.0</td>\n",
+       "      <td>60.0</td>\n",
+       "      <td>62.0</td>\n",
+       "      <td>66.0</td>\n",
+       "      <td>68.0</td>\n",
+       "      <td>70.0</td>\n",
+       "      <td>71.0</td>\n",
        "      <td>...</td>\n",
-       "      <td>-20.0</td>\n",
-       "      <td>TEPO</td>\n",
+       "      <td>-17.0</td>\n",
+       "      <td>DEB</td>\n",
+       "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
@@ -485,7 +486,6 @@
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.0</td>\n",
-       "      <td>1.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
@@ -494,23 +494,23 @@
       ],
       "text/plain": [
        "   Unnamed: 0    index  p_184  p_185  p_186  p_187  p_188  p_189  p_190  \\\n",
-       "0      272149  1297539   94.0   96.0   99.0  101.0  105.0  109.0  115.0   \n",
-       "1      293336  1344903  108.0  112.0  117.0  122.0  128.0  133.0  138.0   \n",
-       "2      240982  1221071  116.0  122.0  130.0  135.0  143.0  150.0  159.0   \n",
-       "3      226406  1173350   95.0  101.0  106.0  112.0  119.0  124.0  128.0   \n",
-       "4      311847  1416666  105.0  109.0  114.0  119.0  125.0  131.0  138.0   \n",
+       "0      287346  1333416   81.0   84.0   88.0   93.0   99.0  104.0  110.0   \n",
+       "1      244422  1226215   81.0   84.0   87.0   90.0   92.0   97.0  100.0   \n",
+       "2      320966  1430326   85.0   88.0   91.0   96.0   98.0  101.0  106.0   \n",
+       "3      231490  1191507  130.0  133.0  138.0  144.0  149.0  156.0  166.0   \n",
+       "4      119707   689897   55.0   58.0   60.0   62.0   66.0   68.0   70.0   \n",
        "\n",
        "   p_191  ...  n_1021  Label  DEB  DEM  DMMP  DPM  DtBP  JP8  MES  TEPO  \n",
-       "0  120.0  ...    -5.0   DtBP  0.0  0.0   0.0  0.0   1.0  0.0  0.0   0.0  \n",
-       "1  145.0  ...    -4.0   DMMP  0.0  0.0   1.0  0.0   0.0  0.0  0.0   0.0  \n",
-       "2  167.0  ...     3.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
-       "3  132.0  ...    -3.0   DtBP  0.0  0.0   0.0  0.0   1.0  0.0  0.0   0.0  \n",
-       "4  143.0  ...   -20.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
+       "0  115.0  ...    -4.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
+       "1  106.0  ...     2.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
+       "2  110.0  ...     2.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
+       "3  175.0  ...     8.0   TEPO  0.0  0.0   0.0  0.0   0.0  0.0  0.0   1.0  \n",
+       "4   71.0  ...   -17.0    DEB  1.0  0.0   0.0  0.0   0.0  0.0  0.0   0.0  \n",
        "\n",
        "[5 rows x 1687 columns]"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 44,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -521,7 +521,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 45,
    "metadata": {},
    "outputs": [
     {
@@ -607,7 +607,7 @@
        "4  [0.12106811, 0.00294244, -0.14450458, 0.072665...  "
       ]
      },
-     "execution_count": 8,
+     "execution_count": 45,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -634,20 +634,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 46,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Selected GPU ID: 1\n",
+      "Selected GPU ID: 0\n",
       "  Name: NVIDIA GeForce RTX 4090\n",
-      "  Memory Free: 24203.0 MB\n",
-      "  Memory Used: 14.0 MB\n",
+      "  Memory Free: 19464.0 MB\n",
+      "  Memory Used: 4753.0 MB\n",
       "  GPU Load: 0.00%\n",
-      "Current device ID:  cuda:1\n",
-      "PyTorch current device ID: 1\n",
+      "Current device ID:  cuda:0\n",
+      "PyTorch current device ID: 0\n",
       "PyTorch current device name: NVIDIA GeForce RTX 4090\n"
      ]
     }
@@ -700,7 +700,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 47,
    "metadata": {},
    "outputs": [
     {
@@ -788,7 +788,7 @@
        "DMMP        [0.12106811, 0.00294244, -0.14450458, 0.072665...  "
       ]
      },
-     "execution_count": 10,
+     "execution_count": 47,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -808,7 +808,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 48,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -827,7 +827,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 49,
    "metadata": {},
    "outputs": [
     {
@@ -1032,7 +1032,7 @@
        "[5 rows x 36 columns]"
       ]
      },
-     "execution_count": 12,
+     "execution_count": 49,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1054,7 +1054,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 50,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1083,7 +1083,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 51,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1109,7 +1109,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1137,7 +1137,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 53,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1151,7 +1151,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 54,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1188,7 +1188,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -1219,7 +1219,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>/home/cmdunham/ChemicalDataGeneration/models/wandb/run-20241214_133828-9e70pyyf</code>"
+       "Run data is saved locally in <code>/home/cmdunham/ChemicalDataGeneration/models/wandb/run-20241215_120717-g89kjqdj</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -1231,7 +1231,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/9e70pyyf' target=\"_blank\">graceful-tree-480</a></strong> to <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/g89kjqdj' target=\"_blank\">feasible-universe-484</a></strong> to <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -1255,7 +1255,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/9e70pyyf' target=\"_blank\">https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/9e70pyyf</a>"
+       " View run at <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/g89kjqdj' target=\"_blank\">https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/g89kjqdj</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -1279,171 +1279,8 @@
       "Saved best model at epoch 2\n",
       "Saved best model at epoch 3\n",
       "Saved best model at epoch 5\n",
-      "Epoch[10/500]:\n",
-      "   Training loss: 5.384983034336727e-05\n",
-      "   Validation loss: 7.512345855149824e-05\n",
-      "-------------------------------------------\n",
-      "Saved best model at epoch 11\n",
-      "Saved best model at epoch 18\n",
-      "Epoch[20/500]:\n",
-      "   Training loss: 3.1747609613904014e-05\n",
-      "   Validation loss: 4.666512693308411e-05\n",
-      "-------------------------------------------\n",
-      "Epoch 00024: reducing learning rate of group 0 to 1.0000e-06.\n",
-      "Saved best model at epoch 25\n",
-      "Saved best model at epoch 26\n",
-      "Saved best model at epoch 27\n",
-      "Saved best model at epoch 28\n",
-      "Saved best model at epoch 29\n",
-      "Saved best model at epoch 30\n",
-      "Epoch[30/500]:\n",
-      "   Training loss: 2.6637609049166716e-06\n",
-      "   Validation loss: 1.0246020043958026e-05\n",
-      "-------------------------------------------\n",
-      "Saved best model at epoch 31\n",
-      "Saved best model at epoch 32\n",
-      "Epoch 00033: reducing learning rate of group 0 to 1.0000e-07.\n",
-      "Saved best model at epoch 34\n",
-      "Saved best model at epoch 35\n",
-      "Epoch 00039: reducing learning rate of group 0 to 1.0000e-08.\n",
-      "Epoch[40/500]:\n",
-      "   Training loss: 1.7544635830435324e-06\n",
-      "   Validation loss: 9.597549847704802e-06\n",
-      "-------------------------------------------\n",
-      "Saved best model at epoch 41\n",
-      "Saved best model at epoch 42\n",
-      "Saved best model at epoch 43\n",
-      "Saved best model at epoch 44\n",
-      "Epoch[50/500]:\n",
-      "   Training loss: 1.743570344305569e-06\n",
-      "   Validation loss: 9.591760524262705e-06\n",
-      "-------------------------------------------\n",
-      "Saved best model at epoch 54\n",
-      "Epoch[60/500]:\n",
-      "   Training loss: 1.7345742398192299e-06\n",
-      "   Validation loss: 9.590475687198378e-06\n",
-      "-------------------------------------------\n",
-      "Validation loss has not improved in 10 epochs. Stopping training at epoch 64.\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 800x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "-------------------------------------------\n",
-      "-------------------------------------------\n",
-      "Dataset:  IMS\n",
-      "Target Embeddings:  ChemNet\n",
-      "-------------------------------------------\n",
-      "-------------------------------------------\n",
-      "Encoder(\n",
-      "  (encoder): Sequential(\n",
-      "    (0): Linear(in_features=1676, out_features=1548, bias=True)\n",
-      "    (1): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (2): Linear(in_features=1548, out_features=1420, bias=True)\n",
-      "    (3): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (4): Linear(in_features=1420, out_features=1292, bias=True)\n",
-      "    (5): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (6): Linear(in_features=1292, out_features=1164, bias=True)\n",
-      "    (7): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (8): Linear(in_features=1164, out_features=1036, bias=True)\n",
-      "    (9): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (10): Linear(in_features=1036, out_features=908, bias=True)\n",
-      "    (11): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (12): Linear(in_features=908, out_features=780, bias=True)\n",
-      "    (13): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (14): Linear(in_features=780, out_features=652, bias=True)\n",
-      "    (15): LeakyReLU(negative_slope=0.01, inplace=True)\n",
-      "    (16): Linear(in_features=652, out_features=512, bias=True)\n",
-      "  )\n",
-      ")\n",
-      "-------------------------------------------\n",
-      "-------------------------------------------\n"
-     ]
-    },
-    {
-     "data": {
-      "application/vnd.jupyter.widget-view+json": {
-       "model_id": "5ac79395397d4bda85ec312b68326436",
-       "version_major": 2,
-       "version_minor": 0
-      },
-      "text/plain": [
-       "VBox(children=(Label(value='11.246 MB of 11.246 MB uploaded\\r'), FloatProgress(value=1.0, max=1.0)))"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "<style>\n",
-       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
-       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
-       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
-       "    </style>\n",
-       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>Early Stopping Ecoch</td><td>▁</td></tr><tr><td>Learning Rate at Final Epoch</td><td>▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>Early Stopping Ecoch</td><td>64</td></tr><tr><td>Encoder Training Loss</td><td>1.73e-06</td></tr><tr><td>Encoder Validation Loss</td><td>9.59e-06</td></tr><tr><td>Learning Rate at Final Epoch</td><td>0.0</td></tr></table><br/></div></div>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run <strong style=\"color:#cdcd00\">graceful-tree-480</strong> at: <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/9e70pyyf' target=\"_blank\">https://wandb.ai/catemerfeld/ims_encoder_decoder/runs/9e70pyyf</a><br/> View project at: <a href='https://wandb.ai/catemerfeld/ims_encoder_decoder' target=\"_blank\">https://wandb.ai/catemerfeld/ims_encoder_decoder</a><br/>Synced 6 W&B file(s), 2 media file(s), 4 artifact file(s) and 0 other file(s)"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Find logs at: <code>./wandb/run-20241214_133828-9e70pyyf/logs</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Hyperparameters for best model: \n",
-      "    batch_size  :  32\n",
-      "    epochs  :  500\n",
-      "    learning_rate  :  1e-05\n"
+      "Saved best model at epoch 7\n",
+      "Saved best model at epoch 8\n"
      ]
     }
    ],
diff --git a/models/ims_to_chemnet_encoder.pth b/models/ims_to_chemnet_encoder.pth
index 7ad2bda4..19756277 100644
Binary files a/models/ims_to_chemnet_encoder.pth and b/models/ims_to_chemnet_encoder.pth differ
diff --git a/models/tmp_plot.png b/models/tmp_plot.png
index 6d7101c5..ec219107 100644
Binary files a/models/tmp_plot.png and b/models/tmp_plot.png differ
diff --git a/models/wandb/debug-internal.log b/models/wandb/debug-internal.log
index 3f25a4ec..ae2409c9 120000
--- a/models/wandb/debug-internal.log
+++ b/models/wandb/debug-internal.log
@@ -1 +1 @@
-run-20241214_134956-b3nhpjs9/logs/debug-internal.log
\ No newline at end of file
+run-20241215_121354-idghq6z8/logs/debug-internal.log
\ No newline at end of file
diff --git a/models/wandb/debug.log b/models/wandb/debug.log
index 2e4315b5..65a08d92 120000
--- a/models/wandb/debug.log
+++ b/models/wandb/debug.log
@@ -1 +1 @@
-run-20241214_134956-b3nhpjs9/logs/debug.log
\ No newline at end of file
+run-20241215_121354-idghq6z8/logs/debug.log
\ No newline at end of file
diff --git a/models/wandb/latest-run b/models/wandb/latest-run
index 587f53f5..ca420845 120000
--- a/models/wandb/latest-run
+++ b/models/wandb/latest-run
@@ -1 +1 @@
-run-20241214_134956-b3nhpjs9
\ No newline at end of file
+run-20241215_121354-idghq6z8
\ No newline at end of file
